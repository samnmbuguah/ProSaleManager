
> client@0.0.0 lint
> eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0 --format json

[{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ExpenseForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport type { Expense } from \"@/types/expense\";\n\nconst expenseCategories = [\n  \"Inventory\",\n  \"Utilities\",\n  \"Rent\",\n  \"Salaries\",\n  \"Marketing\",\n  \"Equipment\",\n  \"Maintenance\",\n  \"Other\",\n] as const;\n\nconst formSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.coerce\n    .number()\n    .min(0.01, \"Amount must be greater than 0\")\n    .max(1000000, \"Amount must be less than 1,000,000\"),\n  category: z.enum(expenseCategories, {\n    required_error: \"Please select a category\",\n  }),\n  date: z.date({\n    required_error: \"Date is required\",\n  }),\n});\n\ntype ExpenseFormValues = z.infer<typeof formSchema>;\n\ninterface ExpenseFormProps {\n  onAddExpense: (\n    expense: Omit<Expense, \"id\" | \"user_id\" | \"createdAt\" | \"updatedAt\">,\n  ) => void;\n}\n\nexport default function ExpenseForm({ onAddExpense }: ExpenseFormProps) {\n  const form = useForm<ExpenseFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      description: \"\",\n      amount: 0,\n      category: \"Other\",\n      date: new Date(),\n    },\n  });\n\n  const onSubmit = (data: ExpenseFormValues) => {\n    onAddExpense({\n      ...data,\n      date: format(data.date, \"yyyy-MM-dd\"),\n    });\n    form.reset({\n      description: \"\",\n      amount: 0,\n      category: \"Other\",\n      date: new Date(),\n    });\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"description\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Description</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter expense description\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"amount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Amount (KES)</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"0.00\"\n                    {...field}\n                    onChange={(e) => {\n                      const value =\n                        e.target.value === \"\" ? \"0\" : e.target.value;\n                      field.onChange(value);\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"category\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Category</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {expenseCategories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"date\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Date</FormLabel>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <FormControl>\n                      <Button\n                        variant={\"outline\"}\n                        className={cn(\n                          \"w-full pl-3 text-left font-normal\",\n                          !field.value && \"text-muted-foreground\",\n                        )}\n                      >\n                        {field.value ? (\n                          format(field.value, \"PPP\")\n                        ) : (\n                          <span>Pick a date</span>\n                        )}\n                        <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                      </Button>\n                    </FormControl>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={field.value}\n                      onSelect={field.onChange}\n                      disabled={(date) =>\n                        date > new Date() || date < new Date(\"1900-01-01\")\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          Add Expense\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ExpenseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/auth/RoleBasedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/customers/CustomerCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/customers/CustomerForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/customers/CustomerFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/customers/CustomerList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductSearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/ProductTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5751,5754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5751,5754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport type {\n  Product,\n  UnitTypeValues,\n  PriceUnit,\n  ProductFormData,\n} from \"@/types/product\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ProductForm } from \"./ProductForm\";\nimport { Settings, Edit } from \"lucide-react\";\n\nexport type ProductWithPricing = Product & {\n  price_units?: PriceUnit[];\n};\n\ninterface ProductTableProps {\n  products: ProductWithPricing[];\n  isLoading: boolean;\n  onUpdateProduct?: (\n    id: number,\n    data: Partial<ProductFormData>,\n  ) => Promise<void>;\n}\n\nexport function ProductTable({\n  products = [],\n  isLoading,\n  onUpdateProduct,\n}: ProductTableProps) {\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!Array.isArray(products)) {\n    return <div>No products found</div>;\n  }\n\n  const getStockStatus = (product: Product) => {\n    if (product.stock <= (product.min_stock || 0)) {\n      return { label: \"Low Stock\", variant: \"destructive\" as const };\n    }\n    if (product.stock >= (product.max_stock || Infinity)) {\n      return { label: \"Overstocked\", variant: \"destructive\" as const };\n    }\n    return { label: \"In Stock\", variant: \"default\" as const };\n  };\n\n  const calculateProfitMargin = (\n    buyingPrice: number | string,\n    sellingPrice: number | string,\n  ) => {\n    const buying = Number(buyingPrice);\n    const selling = Number(sellingPrice);\n    if (buying <= 0) return \"N/A\";\n    return (((selling - buying) / buying) * 100).toFixed(1) + \"%\";\n  };\n\n  const getDefaultPricing = (product: Product) => {\n    const defaultUnit = product.price_units?.find(\n      (unit: {\n        unit_type: string;\n        buying_price: string;\n        selling_price: string;\n        is_default: boolean;\n      }) => unit.is_default,\n    );\n    return (\n      defaultUnit || {\n        buying_price: \"0\",\n        selling_price: \"0\",\n        unit_type: product.stock_unit,\n      }\n    );\n  };\n\n  return (\n    <>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Name</TableHead>\n              <TableHead>Product Number</TableHead>\n              <TableHead>Category</TableHead>\n              <TableHead>Stock Unit</TableHead>\n              <TableHead>Default Price (Buy/Sell)</TableHead>\n              <TableHead>Profit Margin</TableHead>\n              <TableHead>Stock</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {products.map((product) => {\n              const defaultPricing = getDefaultPricing(product);\n              return (\n                <TableRow key={product.id}>\n                  <TableCell className=\"font-medium\">{product.name}</TableCell>\n                  <TableCell>{product.sku}</TableCell>\n                  <TableCell>{product.category}</TableCell>\n                  <TableCell>{product.stock_unit}</TableCell>\n                  <TableCell>\n                    {`KSh ${Number(defaultPricing.buying_price).toLocaleString(\"en-KE\")} / KSh ${Number(defaultPricing.selling_price).toLocaleString(\"en-KE\")}`}\n                  </TableCell>\n                  <TableCell>\n                    {calculateProfitMargin(\n                      defaultPricing.buying_price,\n                      defaultPricing.selling_price,\n                    )}\n                  </TableCell>\n                  <TableCell>{product.stock}</TableCell>\n                  <TableCell>\n                    <Badge variant={getStockStatus(product).variant}>\n                      {getStockStatus(product).label}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setEditingProduct(product)}\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedProduct(product)}\n                      >\n                        <Settings className=\"h-4 w-4 mr-1\" />\n                        Manage\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog\n        open={!!editingProduct}\n        onOpenChange={() => setEditingProduct(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Product</DialogTitle>\n          </DialogHeader>\n          {editingProduct && (\n            <ProductForm\n              initialData={{\n                name: editingProduct.name,\n                sku: editingProduct.sku,\n                category: editingProduct.category || \"\",\n                stock: editingProduct.stock,\n                min_stock: editingProduct.min_stock || 0,\n                max_stock: editingProduct.max_stock || 0,\n                reorder_point: editingProduct.reorder_point || 0,\n                stock_unit: editingProduct.stock_unit as any,\n                price_units: (editingProduct.price_units || []).map((unit) => ({\n                  unit_type: unit.unit_type as UnitTypeValues,\n                  quantity: Number(unit.quantity),\n                  buying_price: String(unit.buying_price),\n                  selling_price: String(unit.selling_price),\n                  is_default: Boolean(unit.is_default),\n                })),\n              }}\n              onSubmit={async (data: ProductFormData) => {\n                if (onUpdateProduct && editingProduct.id) {\n                  await onUpdateProduct(editingProduct.id, data);\n                  setEditingProduct(null);\n                }\n              }}\n              isSubmitting={false}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog\n        open={!!selectedProduct}\n        onOpenChange={() => setSelectedProduct(null)}\n      >\n        <DialogContent className=\"max-w-3xl\">\n          {selectedProduct && (\n            <div className=\"space-y-4\">\n              <DialogHeader>\n                <DialogTitle>\n                  Manage Product: {selectedProduct.name}\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"font-medium\">Stock Information</h3>\n                  <p>Current Stock: {selectedProduct.stock}</p>\n                  <p>Minimum Stock: {selectedProduct.min_stock || \"Not set\"}</p>\n                  <p>Maximum Stock: {selectedProduct.max_stock || \"Not set\"}</p>\n                  <p>\n                    Reorder Point: {selectedProduct.reorder_point || \"Not set\"}\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Pricing Information</h3>\n                  {selectedProduct.price_units?.map(\n                    (unit: {\n                      unit_type: string;\n                      buying_price: string;\n                      selling_price: string;\n                    }) => (\n                      <div key={unit.unit_type} className=\"mb-2\">\n                        <p className=\"capitalize\">\n                          {unit.unit_type.replace(\"_\", \" \")}:\n                        </p>\n                        <p className=\"ml-4\">\n                          Buy: KSh {Number(unit.buying_price).toFixed(2)}\n                        </p>\n                        <p className=\"ml-4\">\n                          Sell: KSh {Number(unit.selling_price).toFixed(2)}\n                        </p>\n                        <p className=\"ml-4\">\n                          Margin:{\" \"}\n                          {calculateProfitMargin(\n                            unit.buying_price,\n                            unit.selling_price,\n                          )}\n                        </p>\n                      </div>\n                    ),\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/PurchaseOrderDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { format } from \"date-fns\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface PurchaseOrderDetailsProps {\n  orderId: number | null;\n  isOpen: boolean;\n  onClose: () => void;\n  supplier?: {\n    name: string;\n    email: string | null;\n    phone: string | null;\n  } | null;\n}\n\ninterface OrderItem {\n  id: number;\n  quantity: number;\n  buying_price: string;\n  selling_price: string;\n  product: {\n    id: number;\n    name: string;\n    stock_unit: string;\n  };\n}\n\nexport function PurchaseOrderDetails({\n  orderId,\n  isOpen,\n  onClose,\n  supplier,\n}: PurchaseOrderDetailsProps) {\n  const { data: items, isLoading } = useQuery<OrderItem[]>({\n    queryKey: [\"purchase-order-items\", orderId],\n    queryFn: async () => {\n      if (!orderId) return [];\n      const response = await fetch(`/api/purchase-orders/${orderId}/items`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch order items\");\n      }\n      return response.json();\n    },\n    enabled: !!orderId,\n  });\n\n  const formatCurrency = (amount: string) => {\n    return `KSh ${Number(amount).toLocaleString(\"en-KE\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle>Purchase Order Details</DialogTitle>\n        </DialogHeader>\n\n        {supplier && (\n          <div className=\"mb-4\">\n            <h3 className=\"font-semibold mb-2\">Supplier Information</h3>\n            <p>Name: {supplier.name}</p>\n            {supplier.email && <p>Email: {supplier.email}</p>}\n            {supplier.phone && <p>Phone: {supplier.phone}</p>}\n          </div>\n        )}\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : (\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Stock Unit</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Buying Price</TableHead>\n                  <TableHead>Selling Price</TableHead>\n                  <TableHead>Total</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {items?.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell>{item.product.name}</TableCell>\n                    <TableCell>{item.product.stock_unit}</TableCell>\n                    <TableCell>{item.quantity}</TableCell>\n                    <TableCell>{formatCurrency(item.buying_price)}</TableCell>\n                    <TableCell>{formatCurrency(item.selling_price)}</TableCell>\n                    <TableCell>\n                      {formatCurrency(\n                        (Number(item.buying_price) * item.quantity).toString(),\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/PurchaseOrderForm.tsx","messages":[{"ruleId":"camelcase","severity":2,"message":"Identifier 'product_id' is not in camel case.","line":50,"column":20,"nodeType":"Identifier","messageId":"notCamelCase","endLine":50,"endColumn":38},{"ruleId":"camelcase","severity":2,"message":"Identifier 'supplier_id' is not in camel case.","line":102,"column":33,"nodeType":"Identifier","messageId":"notCamelCase","endLine":102,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useSuppliers } from \"@/hooks/use-suppliers\";\nimport { useInventory } from \"@/hooks/use-inventory\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  purchaseOrderSchema,\n  type PurchaseOrderFormData,\n  type PurchaseOrderItem,\n  type PurchaseOrderSubmitData,\n} from \"@/types/purchase-order\";\n\ninterface PurchaseOrderFormProps {\n  onSubmit: (data: PurchaseOrderSubmitData) => Promise<void>;\n  isSubmitting: boolean;\n}\n\nexport function PurchaseOrderForm({\n  onSubmit,\n  isSubmitting,\n}: PurchaseOrderFormProps) {\n  const { suppliers = [], productSuppliers = [] } = useSuppliers();\n  const { products = [] } = useInventory();\n  const [items, setItems] = useState<PurchaseOrderItem[]>([]);\n\n  const form = useForm<PurchaseOrderFormData>({\n    resolver: zodResolver(purchaseOrderSchema),\n    defaultValues: {\n      supplier_id: \"\",\n    },\n  });\n\n  const addItem = (product_id: string) => {\n    const product = products.find((p) => p.id === parseInt(product_id));\n    if (!product) return;\n\n    // Find preferred supplier price if available\n    const supplierPricing = productSuppliers.find(\n      (ps) =>\n        Number(ps.product_id) === Number(product_id) &&\n        Number(ps.supplier_id) === Number(form.getValues(\"supplier_id\")),\n    );\n\n    setItems([\n      ...items,\n      {\n        product_id: parseInt(product_id),\n        quantity: 1,\n        buying_price: Number(\n          supplierPricing\n            ? supplierPricing.cost_price\n            : product.price_units?.find((p) => p.is_default)?.buying_price ||\n                \"0\",\n        ),\n        selling_price: Number(\n          product.price_units?.find((p) => p.is_default)?.selling_price || \"0\",\n        ),\n        name: product.name,\n      },\n    ]);\n  };\n\n  const updateItemQuantity = (index: number, quantity: string) => {\n    const newItems = [...items];\n    newItems[index].quantity = parseInt(quantity) || 0;\n    setItems(newItems);\n  };\n\n  const updateItemPrice = (\n    index: number,\n    field: \"buying_price\" | \"selling_price\",\n    value: string,\n  ) => {\n    const newItems = [...items];\n    newItems[index][field] = parseFloat(value) || 0;\n    setItems(newItems);\n  };\n\n  const calculateTotal = (): string => {\n    return items\n      .reduce((sum, item) => sum + item.quantity * item.buying_price, 0)\n      .toFixed(2);\n  };\n\n  const handleSupplierChange = (supplier_id: string) => {\n    form.setValue(\"supplier_id\", supplier_id);\n    // Update prices based on selected supplier\n    setItems(\n      items.map((item) => {\n        const supplierPricing = productSuppliers.find(\n          (ps) =>\n            Number(ps.product_id) === Number(item.product_id) &&\n            Number(ps.supplier_id) === Number(supplier_id),\n        );\n        return {\n          ...item,\n          buying_price: Number(\n            supplierPricing ? supplierPricing.cost_price : item.buying_price,\n          ),\n        };\n      }),\n    );\n  };\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) =>\n          onSubmit({\n            supplier_id: parseInt(data.supplier_id),\n            items,\n            total: calculateTotal(),\n          }),\n        )}\n        className=\"space-y-4\"\n      >\n        <FormField\n          control={form.control}\n          name=\"supplier_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Supplier</FormLabel>\n              <Select onValueChange={handleSupplierChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select supplier\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {suppliers.map((supplier) => (\n                    <SelectItem key={supplier.id} value={String(supplier.id)}>\n                      {supplier.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"mt-4\">\n          <FormLabel>Add Products</FormLabel>\n          <Select onValueChange={addItem}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select product\" />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {products.map((product) => (\n                <SelectItem key={product.id} value={String(product.id)}>\n                  {product.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"mt-4 space-y-4 max-h-[50vh] overflow-y-auto\">\n          {items.map((item, index) => (\n            <div key={index} className=\"space-y-2 p-4 border rounded-lg\">\n              <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center\">\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{item.name}</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Current Stock:{\" \"}\n                    {products.find((p) => p.id === item.product_id)?.stock || 0}\n                    → New Stock:{\" \"}\n                    {(products.find((p) => p.id === item.product_id)?.stock ||\n                      0) + item.quantity}\n                  </div>\n                </div>\n                <div className=\"flex flex-col gap-2 w-full md:w-auto\">\n                  <div>\n                    <FormLabel>Quantity</FormLabel>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={item.quantity}\n                      onChange={(e) =>\n                        updateItemQuantity(index, e.target.value)\n                      }\n                      className=\"w-full md:w-24\"\n                    />\n                  </div>\n                  <div>\n                    <FormLabel>Buying Price (KSh)</FormLabel>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.buying_price}\n                      onChange={(e) =>\n                        updateItemPrice(index, \"buying_price\", e.target.value)\n                      }\n                      className=\"w-full md:w-32\"\n                    />\n                  </div>\n                  <div>\n                    <FormLabel>Selling Price (KSh)</FormLabel>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.selling_price}\n                      onChange={(e) =>\n                        updateItemPrice(index, \"selling_price\", e.target.value)\n                      }\n                      className=\"w-full md:w-32\"\n                    />\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    onClick={() => {\n                      const newItems = [...items];\n                      newItems.splice(index, 1);\n                      setItems(newItems);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-4 text-right text-lg font-semibold\">\n          Total: KSh {calculateTotal()}\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isSubmitting || items.length === 0}\n        >\n          {isSubmitting ? \"Creating...\" : \"Create Purchase Order\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/PurchaseOrderList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/PurchaseOrders.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'purchaseOrdersError' is assigned a value but never used.","line":80,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedOrder' is assigned a value but never used.","line":87,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchSuppliers' is assigned a value but never used.","line":104,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchProducts' is assigned a value but never used.","line":120,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"@/store\";\nimport { fetchPurchaseOrders } from \"@/store/purchaseOrdersSlice\";\n\ninterface PurchaseOrder {\n  id: number;\n  order_number: string;\n  supplier_id: number;\n  order_date: string;\n  expected_delivery_date: string | null;\n  status: \"pending\" | \"approved\" | \"ordered\" | \"received\" | \"cancelled\";\n  total_amount: number;\n  notes: string | null;\n  supplier: {\n    name: string;\n  };\n}\n\ninterface PurchaseOrderFormData {\n  supplier_id: number;\n  expected_delivery_date: string;\n  notes: string;\n  items: {\n    product_id: number;\n    quantity: number;\n    unit_price: number;\n  }[];\n}\n\ninterface Supplier {\n  id: number;\n  name: string;\n}\n\ninterface Product {\n  id: number;\n  name: string;\n  product_number: string;\n  buying_price: number;\n}\n\nexport function PurchaseOrders() {\n  const dispatch = useDispatch<AppDispatch>();\n  const purchaseOrders = useSelector(\n    (state: RootState) => state.purchaseOrders.items,\n  );\n  const purchaseOrdersStatus = useSelector(\n    (state: RootState) => state.purchaseOrders.status,\n  );\n  const purchaseOrdersError = useSelector(\n    (state: RootState) => state.purchaseOrders.error,\n  );\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<PurchaseOrder | null>(\n    null,\n  );\n  const [formData, setFormData] = useState<PurchaseOrderFormData>({\n    supplier_id: 0,\n    expected_delivery_date: \"\",\n    notes: \"\",\n    items: [{ product_id: 0, quantity: 1, unit_price: 0 }],\n  });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (purchaseOrdersStatus === \"idle\") {\n      dispatch(fetchPurchaseOrders());\n    }\n  }, [dispatch, purchaseOrdersStatus]);\n\n  const fetchSuppliers = async () => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/suppliers`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch suppliers\");\n      const data = await response.json();\n      setSuppliers(data);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const fetchProducts = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/products`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleItemChange = (\n    index: number,\n    field: string,\n    value: string | number,\n  ) => {\n    setFormData((prev) => {\n      const newItems = [...prev.items];\n      newItems[index] = {\n        ...newItems[index],\n        [field]: value,\n      };\n      return {\n        ...prev,\n        items: newItems,\n      };\n    });\n  };\n\n  const addItem = () => {\n    setFormData((prev) => ({\n      ...prev,\n      items: [...prev.items, { product_id: 0, quantity: 1, unit_price: 0 }],\n    }));\n  };\n\n  const removeItem = (index: number) => {\n    setFormData((prev) => ({\n      ...prev,\n      items: prev.items.filter((_, i) => i !== index),\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/purchase-orders`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) throw new Error(\"Failed to create purchase order\");\n\n      toast({\n        title: \"Success\",\n        description: \"Purchase order created successfully\",\n      });\n\n      setFormData({\n        supplier_id: 0,\n        expected_delivery_date: \"\",\n        notes: \"\",\n        items: [{ product_id: 0, quantity: 1, unit_price: 0 }],\n      });\n      setIsAddDialogOpen(false);\n      dispatch(fetchPurchaseOrders());\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create purchase order\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleStatusChange = async (\n    orderId: number,\n    newStatus: PurchaseOrder[\"status\"],\n  ) => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/purchase-orders/${orderId}/status`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ status: newStatus }),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) throw new Error(\"Failed to update status\");\n\n      toast({\n        title: \"Success\",\n        description: \"Status updated successfully\",\n      });\n\n      dispatch(fetchPurchaseOrders());\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadgeVariant = (status: PurchaseOrder[\"status\"]) => {\n    switch (status) {\n      case \"pending\":\n        return \"secondary\";\n      case \"approved\":\n        return \"default\";\n      case \"ordered\":\n        return \"default\";\n      case \"received\":\n        return \"default\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const PurchaseOrderForm = () => (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"supplier_id\">Supplier</Label>\n        <Select\n          value={formData.supplier_id.toString()}\n          onValueChange={(value) =>\n            setFormData((prev) => ({ ...prev, supplier_id: parseInt(value) }))\n          }\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select a supplier\" />\n          </SelectTrigger>\n          <SelectContent>\n            {suppliers.map((supplier) => (\n              <SelectItem key={supplier.id} value={supplier.id.toString()}>\n                {supplier.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"expected_delivery_date\">Expected Delivery Date</Label>\n        <Input\n          id=\"expected_delivery_date\"\n          name=\"expected_delivery_date\"\n          type=\"date\"\n          value={formData.expected_delivery_date}\n          onChange={handleInputChange}\n          required\n        />\n      </div>\n\n      <div>\n        <Label>Items</Label>\n        {formData.items.map((item, index) => (\n          <div key={index} className=\"grid grid-cols-3 gap-2 mt-2\">\n            <Select\n              value={item.product_id.toString()}\n              onValueChange={(value) =>\n                handleItemChange(index, \"product_id\", parseInt(value))\n              }\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a product\" />\n              </SelectTrigger>\n              <SelectContent>\n                {products.map((product) => (\n                  <SelectItem key={product.id} value={product.id.toString()}>\n                    {product.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={item.quantity}\n              onChange={(e) =>\n                handleItemChange(index, \"quantity\", parseInt(e.target.value))\n              }\n              placeholder=\"Quantity\"\n            />\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                value={item.unit_price}\n                onChange={(e) =>\n                  handleItemChange(\n                    index,\n                    \"unit_price\",\n                    parseFloat(e.target.value),\n                  )\n                }\n                placeholder=\"Unit Price\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => removeItem(index)}\n              >\n                Remove\n              </Button>\n            </div>\n          </div>\n        ))}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={addItem}\n          className=\"mt-2\"\n        >\n          Add Item\n        </Button>\n      </div>\n\n      <div>\n        <Label htmlFor=\"notes\">Notes</Label>\n        <Input\n          id=\"notes\"\n          name=\"notes\"\n          value={formData.notes}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <DialogFooter>\n        <Button type=\"submit\">Create Purchase Order</Button>\n      </DialogFooter>\n    </form>\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Purchase Orders</h2>\n        <Button onClick={() => setIsAddDialogOpen(true)}>\n          Create Purchase Order\n        </Button>\n      </div>\n\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Order Number</TableHead>\n              <TableHead>Supplier</TableHead>\n              <TableHead>Order Date</TableHead>\n              <TableHead>Expected Delivery</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Total Amount</TableHead>\n              <TableHead>Notes</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {purchaseOrders.map((order) => (\n              <TableRow key={order.id}>\n                <TableCell>{order.order_number}</TableCell>\n                <TableCell>\n                  {order.supplier?.name || \"Unknown Supplier\"}\n                </TableCell>\n                <TableCell>\n                  {format(new Date(order.order_date), \"PPP\")}\n                </TableCell>\n                <TableCell>\n                  {order.expected_delivery_date\n                    ? format(new Date(order.expected_delivery_date), \"PPP\")\n                    : \"Not set\"}\n                </TableCell>\n                <TableCell>\n                  <Badge variant={getStatusBadgeVariant(order.status)}>\n                    {order.status}\n                  </Badge>\n                </TableCell>\n                <TableCell>KSh {order.total_amount.toLocaleString()}</TableCell>\n                <TableCell>{order.notes || \"No notes\"}</TableCell>\n                <TableCell>\n                  <Select\n                    value={order.status}\n                    onValueChange={(value) =>\n                      handleStatusChange(\n                        order.id,\n                        value as PurchaseOrder[\"status\"],\n                      )\n                    }\n                  >\n                    <SelectTrigger className=\"w-[130px]\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"ordered\">Ordered</SelectItem>\n                      <SelectItem value=\"received\">Received</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create Purchase Order</DialogTitle>\n            <DialogDescription>\n              Fill in the purchase order details below.\n            </DialogDescription>\n          </DialogHeader>\n          <PurchaseOrderForm />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>View Purchase Order</DialogTitle>\n            <DialogDescription>\n              Purchase order details and status.\n            </DialogDescription>\n          </DialogHeader>\n          {selectedOrder && (\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-medium\">Order Information</h3>\n                <p>Order Number: {selectedOrder.order_number}</p>\n                <p>Supplier: {selectedOrder.supplier.name}</p>\n                <p>\n                  Order Date:{\" \"}\n                  {format(new Date(selectedOrder.order_date), \"MMM d, yyyy\")}\n                </p>\n                <p>\n                  Expected Delivery:{\" \"}\n                  {selectedOrder.expected_delivery_date\n                    ? format(\n                        new Date(selectedOrder.expected_delivery_date),\n                        \"MMM d, yyyy\",\n                      )\n                    : \"-\"}\n                </p>\n                <p>Status: {selectedOrder.status}</p>\n                <p>\n                  Total Amount: KSh{\" \"}\n                  {selectedOrder.total_amount.toLocaleString(\"en-KE\")}\n                </p>\n              </div>\n              {selectedOrder.notes && (\n                <div>\n                  <h3 className=\"font-medium\">Notes</h3>\n                  <p>{selectedOrder.notes}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/SupplierForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/SupplierFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/SupplierList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/SupplierPricing.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Supplier' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport type { Product } from \"@/types/product\";\nimport type { Supplier, SupplierFormData } from \"@/types/supplier\";\nimport type { ProductSupplierFormData } from \"@/types/product-supplier\";\nimport { useSuppliers } from \"../../hooks/use-suppliers\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { supplierSchema } from \"@/types/supplier\";\nimport { productSupplierSchema } from \"@/types/product-supplier\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface SupplierPricingProps {\n  product: Product;\n}\n\nexport function SupplierPricing({ product }: SupplierPricingProps) {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [isLinkFormOpen, setIsLinkFormOpen] = useState(false);\n  const {\n    suppliers,\n    productSuppliers,\n    createSupplier,\n    linkProductToSupplier,\n    isCreating,\n    isLinking,\n  } = useSuppliers();\n\n  const form = useForm<SupplierFormData>({\n    resolver: zodResolver(supplierSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const linkForm = useForm<ProductSupplierFormData>({\n    resolver: zodResolver(productSupplierSchema),\n    defaultValues: {\n      product_id: String(product.id),\n      supplier_id: \"\",\n      cost_price: \"\",\n      is_preferred: \"false\",\n    },\n  });\n\n  const onSubmit = async (data: SupplierFormData) => {\n    await createSupplier(data);\n    setIsFormOpen(false);\n    form.reset();\n  };\n\n  const onLinkSubmit = async (data: ProductSupplierFormData) => {\n    await linkProductToSupplier(data);\n    setIsLinkFormOpen(false);\n    linkForm.reset();\n  };\n\n  const productSuppliersList =\n    productSuppliers?.filter(\n      (ps) => Number(ps.product_id) === Number(product.id),\n    ) || [];\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold\">Supplier Management</h2>\n        <div className=\"space-x-2\">\n          <Button onClick={() => setIsFormOpen(true)}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Supplier\n          </Button>\n          <Button onClick={() => setIsLinkFormOpen(true)} variant=\"outline\">\n            Link Supplier\n          </Button>\n        </div>\n      </div>\n\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Supplier</TableHead>\n            <TableHead>Cost Price</TableHead>\n            <TableHead>Preferred</TableHead>\n            <TableHead>Last Supply</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {productSuppliersList.map((ps) => (\n            <TableRow key={ps.id}>\n              <TableCell>\n                {suppliers?.find((s) => s.id === Number(ps.supplier_id))\n                  ?.name || \"Unknown Supplier\"}\n              </TableCell>\n              <TableCell>KSh {Number(ps.cost_price).toFixed(2)}</TableCell>\n              <TableCell>{ps.is_preferred ? \"Yes\" : \"No\"}</TableCell>\n              <TableCell>\n                {ps.last_supply_date\n                  ? new Date(ps.last_supply_date).toLocaleDateString()\n                  : \"Never\"}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Supplier</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isCreating}>\n                Add Supplier\n              </Button>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isLinkFormOpen} onOpenChange={setIsLinkFormOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Link Supplier to Product</DialogTitle>\n          </DialogHeader>\n          <Form {...linkForm}>\n            <form\n              onSubmit={linkForm.handleSubmit(onLinkSubmit)}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={linkForm.control}\n                name=\"supplier_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Supplier</FormLabel>\n                    <FormControl>\n                      <select\n                        {...field}\n                        className=\"w-full p-2 border rounded\"\n                        onChange={(e) =>\n                          field.onChange(\n                            e.target.value ? Number(e.target.value) : undefined,\n                          )\n                        }\n                      >\n                        <option value=\"\">Select a supplier</option>\n                        {suppliers?.map((supplier) => (\n                          <option key={supplier.id} value={supplier.id}>\n                            {supplier.name}\n                          </option>\n                        ))}\n                      </select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={linkForm.control}\n                name=\"cost_price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cost Price</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={linkForm.control}\n                name=\"is_preferred\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center space-x-2\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value === \"true\"}\n                        onCheckedChange={(checked) =>\n                          field.onChange(String(checked))\n                        }\n                      />\n                    </FormControl>\n                    <FormLabel>Preferred Supplier</FormLabel>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isLinking}>\n                Link Supplier\n              </Button>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/Suppliers.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'suppliersError' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"@/store\";\nimport { fetchSuppliers } from \"@/store/suppliersSlice\";\n\ninterface Supplier {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  contact_person?: string;\n  status: \"active\" | \"inactive\";\n}\n\ninterface SupplierFormData {\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  contact_person?: string;\n}\n\nconst Suppliers = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const suppliers = useSelector((state: RootState) => state.suppliers.items);\n  const suppliersStatus = useSelector(\n    (state: RootState) => state.suppliers.status,\n  );\n  const suppliersError = useSelector(\n    (state: RootState) => state.suppliers.error,\n  );\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(\n    null,\n  );\n  const [formData, setFormData] = useState<SupplierFormData>({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    contact_person: \"\",\n  });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (suppliersStatus === \"idle\") {\n      dispatch(fetchSuppliers());\n    }\n  }, [dispatch, suppliersStatus]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const url = selectedSupplier\n        ? `${import.meta.env.VITE_API_URL}/suppliers/${selectedSupplier.id}`\n        : `${import.meta.env.VITE_API_URL}/suppliers`;\n\n      const response = await fetch(url, {\n        method: selectedSupplier ? \"PUT\" : \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to save supplier\");\n\n      toast({\n        title: \"Success\",\n        description: `Supplier ${selectedSupplier ? \"updated\" : \"created\"} successfully`,\n      });\n\n      setFormData({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        address: \"\",\n        contact_person: \"\",\n      });\n      setIsAddDialogOpen(false);\n      setIsEditDialogOpen(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to ${selectedSupplier ? \"update\" : \"create\"} supplier`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEdit = (supplier: Supplier) => {\n    setSelectedSupplier(supplier);\n    setFormData({\n      name: supplier.name,\n      email: supplier.email,\n      phone: supplier.phone,\n      address: supplier.address,\n      contact_person: supplier.contact_person || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    if (!window.confirm(\"Are you sure you want to delete this supplier?\"))\n      return;\n\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/suppliers/${id}`,\n        {\n          method: \"DELETE\",\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) throw new Error(\"Failed to delete supplier\");\n\n      toast({\n        title: \"Success\",\n        description: \"Supplier deleted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete supplier\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const SupplierForm = () => (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input\n          id=\"name\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleInputChange}\n          required\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={handleInputChange}\n          required\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"phone\">Phone</Label>\n        <Input\n          id=\"phone\"\n          name=\"phone\"\n          value={formData.phone}\n          onChange={handleInputChange}\n          required\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"address\">Address</Label>\n        <Input\n          id=\"address\"\n          name=\"address\"\n          value={formData.address}\n          onChange={handleInputChange}\n          required\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"contact_person\">Contact Person</Label>\n        <Input\n          id=\"contact_person\"\n          name=\"contact_person\"\n          value={formData.contact_person}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <DialogFooter>\n        <Button type=\"submit\">\n          {selectedSupplier ? \"Update Supplier\" : \"Add Supplier\"}\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Suppliers</h2>\n        <Button onClick={() => setIsAddDialogOpen(true)}>Add Supplier</Button>\n      </div>\n\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Name</TableHead>\n              <TableHead>Contact Person</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Phone</TableHead>\n              <TableHead>Address</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {suppliers.map((supplier) => (\n              <TableRow key={supplier.id}>\n                <TableCell className=\"font-medium\">{supplier.name}</TableCell>\n                <TableCell>{supplier.contact_person || \"-\"}</TableCell>\n                <TableCell>{supplier.email}</TableCell>\n                <TableCell>{supplier.phone}</TableCell>\n                <TableCell>{supplier.address}</TableCell>\n                <TableCell>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(supplier)}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(supplier.id)}\n                    >\n                      Delete\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Supplier</DialogTitle>\n          </DialogHeader>\n          <SupplierForm />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Supplier</DialogTitle>\n          </DialogHeader>\n          <SupplierForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Suppliers;\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/inventory/TabsNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/layout/MainNav.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":58,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Store,\n  PackageSearch,\n  Users,\n  BarChart3,\n  LogOut,\n  User,\n  Receipt,\n  Menu,\n  Wallet,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\nconst ROLE_ROUTES = {\n  user: [\n    { path: \"/pos\", label: \"POS\", icon: Store },\n    { path: \"/inventory\", label: \"Inventory\", icon: PackageSearch },\n    { path: \"/expenses\", label: \"Expenses\", icon: Wallet },\n  ],\n  admin: [\n    { path: \"/pos\", label: \"POS\", icon: Store },\n    { path: \"/inventory\", label: \"Inventory\", icon: PackageSearch },\n    { path: \"/customers\", label: \"Customers\", icon: Users },\n    { path: \"/sales\", label: \"Sales\", icon: Receipt },\n    { path: \"/reports\", label: \"Reports\", icon: BarChart3 },\n    { path: \"/expenses\", label: \"Expenses\", icon: Wallet },\n  ],\n};\n\nexport default function MainNav() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!user) return null;\n\n  const routes = ROLE_ROUTES[user.role];\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Logout failed\",\n        description: \"Please try again later\",\n      });\n    }\n  };\n\n  const NavLinks = () => (\n    <>\n      {routes.map(({ path, label, icon: Icon }) => (\n        <Link key={path} href={path}>\n          <Button\n            variant={location === path ? \"default\" : \"ghost\"}\n            className=\"flex items-center space-x-2\"\n            onClick={() => setIsOpen(false)}\n          >\n            <Icon className=\"h-4 w-4\" />\n            <span>{label}</span>\n          </Button>\n        </Link>\n      ))}\n    </>\n  );\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background border-b\">\n      <div className=\"w-full px-4\">\n        <div className=\"h-16 flex items-center justify-center space-x-4\">\n          {/* Mobile Menu */}\n          <div className=\"md:hidden\">\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\">\n                <SheetHeader>\n                  <SheetTitle>Menu</SheetTitle>\n                </SheetHeader>\n                <div className=\"flex flex-col space-y-2 mt-4\">\n                  <NavLinks />\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n\n          {/* Desktop Menu */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <NavLinks />\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"hidden md:flex items-center space-x-2\">\n              <Link href=\"/profile\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <User className=\"h-4 w-4\" />\n                  <span>{user.name}</span>\n                </Button>\n              </Link>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" onClick={handleLogout}>\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/Cart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/CustomerForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/CustomerSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/LoyaltyPointsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/PaymentDialog.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'PaymentDetails' was used before it was defined.","line":17,"column":31,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":17,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { CartItem } from \"@/types/pos\";\n\ninterface PaymentDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  cartItems: CartItem[];\n  onProcessPayment: (details: PaymentDetails) => void;\n}\n\nexport interface PaymentDetails {\n  paymentMethod: \"cash\" | \"mpesa\";\n  amountPaid: number;\n  change: number;\n}\n\nexport function PaymentDialog({\n  isOpen,\n  onClose,\n  cartItems,\n  onProcessPayment,\n}: PaymentDialogProps) {\n  const [paymentMethod, setPaymentMethod] = useState<\"cash\" | \"mpesa\">(\"cash\");\n  const [amountPaid, setAmountPaid] = useState<string>(\"\");\n\n  const total = cartItems.reduce((sum, item) => sum + item.total, 0);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const paid = paymentMethod === \"mpesa\" ? total : Number(amountPaid);\n    onProcessPayment({\n      paymentMethod,\n      amountPaid: paid,\n      change: Math.max(0, paid - total),\n    });\n  };\n\n  const handlePaymentMethodSelect = (method: \"cash\" | \"mpesa\") => {\n    setPaymentMethod(method);\n    if (method === \"mpesa\") {\n      setAmountPaid(total.toString());\n    } else {\n      setAmountPaid(\"\");\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Process Payment</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Button\n              type=\"button\"\n              variant={paymentMethod === \"cash\" ? \"default\" : \"outline\"}\n              className=\"flex-1\"\n              onClick={() => handlePaymentMethodSelect(\"cash\")}\n            >\n              Cash\n            </Button>\n            <Button\n              type=\"button\"\n              variant={paymentMethod === \"mpesa\" ? \"default\" : \"outline\"}\n              className=\"flex-1\"\n              onClick={() => handlePaymentMethodSelect(\"mpesa\")}\n            >\n              M-Pesa\n            </Button>\n          </div>\n\n          <div>\n            <Label>Total Amount</Label>\n            <Input\n              type=\"text\"\n              value={`KSh ${total.toFixed(2)}`}\n              disabled\n              className=\"text-right\"\n            />\n          </div>\n\n          {paymentMethod === \"cash\" && (\n            <div>\n              <Label>Amount Paid</Label>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                min={total}\n                value={amountPaid}\n                onChange={(e) => setAmountPaid(e.target.value)}\n                required\n                className=\"text-right\"\n              />\n            </div>\n          )}\n\n          {paymentMethod === \"cash\" && amountPaid && (\n            <div>\n              <Label>Change</Label>\n              <Input\n                type=\"text\"\n                value={`KSh ${Math.max(0, Number(amountPaid) - total).toFixed(2)}`}\n                disabled\n                className=\"text-right\"\n              />\n            </div>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={\n              paymentMethod === \"cash\" &&\n              (!amountPaid || Number(amountPaid) < total)\n            }\n          >\n            Complete Payment\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/ProductSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriceUnit' is defined but never used.","line":5,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search } from \"lucide-react\";\nimport type { Product, PriceUnit, UnitTypeValues } from \"@/types/product\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface ProductSearchProps {\n  products: Product[];\n  onSelect: (product: Product, selectedUnit: UnitTypeValues) => void;\n  searchProducts: (query: string) => void;\n}\n\nexport function ProductSearch({\n  products,\n  onSelect,\n  searchProducts,\n}: ProductSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [selectedUnits, setSelectedUnits] = useState<\n    Record<number, UnitTypeValues>\n  >({});\n\n  const handleSearch = () => {\n    searchProducts(query);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const handleProductSelect = (product: Product) => {\n    const selectedUnit =\n      selectedUnits[product.id!] ||\n      (product.price_units?.[0]?.unit_type as UnitTypeValues);\n    if (selectedUnit) {\n      onSelect(product, selectedUnit);\n    }\n  };\n\n  const handleUnitChange = (productId: number, value: UnitTypeValues) => {\n    setSelectedUnits((prev) => ({ ...prev, [productId]: value }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <Input\n          placeholder=\"Search products...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <Button onClick={handleSearch}>\n          <Search className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {products.map((product) => (\n          <div\n            key={product.id}\n            className=\"bg-card rounded-lg border p-4 space-y-2\"\n          >\n            {product.image_url && (\n              <img\n                src={product.image_url}\n                alt={product.name}\n                className=\"w-full h-32 object-cover rounded-md\"\n              />\n            )}\n            <h3 className=\"font-semibold\">{product.name}</h3>\n            <div className=\"flex flex-col gap-2\">\n              <Select\n                value={\n                  selectedUnits[product.id!] ||\n                  (product.price_units?.[0]?.unit_type as string)\n                }\n                onValueChange={(value) =>\n                  handleUnitChange(product.id!, value as UnitTypeValues)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select unit\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {product.price_units?.map((unit) => (\n                    <SelectItem key={unit.id} value={unit.unit_type}>\n                      {unit.unit_type} - {unit.selling_price}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button onClick={() => handleProductSelect(product)}>\n                Add to Cart\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/ReceiptPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/ReceiptSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/pos/SaleTerminal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/products/ProductForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/reports/CustomerHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/reports/InventoryStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3842,3845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3842,3845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Product } from \"@/types/schema\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface InventoryStatusProps {\n  products: Product[];\n  onSearch: (query: string) => void;\n  onFilter: (category: string) => void;\n}\n\nexport default function InventoryStatus({\n  products,\n  onSearch,\n  onFilter,\n}: InventoryStatusProps) {\n  const getStockStatus = (quantity: number) => {\n    if (quantity <= 0) return { label: \"Out of Stock\", variant: \"destructive\" };\n    if (quantity < 10) return { label: \"Low Stock\", variant: \"warning\" };\n    return { label: \"In Stock\", variant: \"success\" };\n  };\n\n  const categories = Array.from(\n    new Set(products.map((p) => p.category).filter(Boolean)),\n  );\n\n  const totalValue = products.reduce(\n    (sum, product) => sum + product.price * product.quantity,\n    0,\n  );\n\n  const handleFilterChange = (value: string) => {\n    onFilter(value === \"all\" ? \"\" : value);\n  };\n\n  const formatCurrency = (amount: number | null | undefined) => {\n    if (amount === null || amount === undefined) return \"KSh 0.00\";\n    return `KSh ${Number(amount).toFixed(2)}`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Inventory Status</h2>\n          <p className=\"text-muted-foreground\">\n            Showing {products.length} products\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-lg\">\n            Total Value:{\" \"}\n            <span className=\"font-bold\">{formatCurrency(totalValue)}</span>\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"flex-1\">\n          <Input\n            placeholder=\"Search products...\"\n            onChange={(e) => onSearch(e.target.value)}\n          />\n        </div>\n        <Select onValueChange={handleFilterChange} defaultValue=\"all\">\n          <SelectTrigger className=\"w-[200px]\">\n            <SelectValue placeholder=\"Filter by category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            {categories.map((category) => (\n              <SelectItem key={category} value={category!}>\n                {category}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Product</TableHead>\n            <TableHead>Product Code</TableHead>\n            <TableHead>Category</TableHead>\n            <TableHead className=\"text-right\">Price</TableHead>\n            <TableHead className=\"text-right\">Quantity</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Value</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {products.map((product) => {\n            const status = getStockStatus(product.quantity);\n            const value = product.price * product.quantity;\n            return (\n              <TableRow key={product.id}>\n                <TableCell>{product.name}</TableCell>\n                <TableCell>{product.sku}</TableCell>\n                <TableCell>{product.category || \"Uncategorized\"}</TableCell>\n                <TableCell className=\"text-right\">\n                  {formatCurrency(product.price)}\n                </TableCell>\n                <TableCell className=\"text-right\">{product.quantity}</TableCell>\n                <TableCell>\n                  <Badge variant={status.variant as any}>{status.label}</Badge>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  {formatCurrency(value)}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/reports/ProductPerformance.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":99,"column":11,"nodeType":"JSXOpeningElement","endLine":99,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport type { Product } from \"@/types/schema\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface ProductSales {\n  productId: number;\n  quantity: number;\n  revenue: number;\n  profit: number;\n  lastSold: Date;\n}\n\ninterface ProductPerformanceProps {\n  products: Product[];\n  sales: ProductSales[];\n  onDateRangeChange: (startDate: Date, endDate: Date) => void;\n  onSortChange: (sortBy: string) => void;\n}\n\nexport default function ProductPerformance({\n  products,\n  sales,\n  onDateRangeChange,\n  onSortChange,\n}: ProductPerformanceProps) {\n  const [startDate, setStartDate] = useState<string>(\"\");\n  const [endDate, setEndDate] = useState<string>(\"\");\n\n  const handleDateRangeSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (startDate && endDate) {\n      onDateRangeChange(new Date(startDate), new Date(endDate));\n    }\n  };\n\n  const totalRevenue = sales.reduce((sum, s) => sum + s.revenue, 0);\n  const totalProfit = sales.reduce((sum, s) => sum + s.profit, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Product Performance</h2>\n          <p className=\"text-muted-foreground\">\n            Showing {products.length} products\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-lg\">\n            Total Revenue:{\" \"}\n            <span className=\"font-bold\">${totalRevenue.toFixed(2)}</span>\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Total Profit: ${totalProfit.toFixed(2)}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4 items-end\">\n        <form onSubmit={handleDateRangeSubmit} className=\"flex gap-4 items-end\">\n          <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n            <label htmlFor=\"startDate\">Start Date</label>\n            <Input\n              type=\"date\"\n              id=\"startDate\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n          </div>\n          <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n            <label htmlFor=\"endDate\">End Date</label>\n            <Input\n              type=\"date\"\n              id=\"endDate\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </div>\n          <Button type=\"submit\">Filter</Button>\n        </form>\n\n        <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n          <label>Sort By</label>\n          <Select onValueChange={onSortChange}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select sort order\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"revenue\">Revenue</SelectItem>\n              <SelectItem value=\"profit\">Profit</SelectItem>\n              <SelectItem value=\"quantity\">Quantity</SelectItem>\n              <SelectItem value=\"lastSold\">Last Sold</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Product</TableHead>\n            <TableHead>Product Code</TableHead>\n            <TableHead className=\"text-right\">Quantity Sold</TableHead>\n            <TableHead className=\"text-right\">Revenue</TableHead>\n            <TableHead className=\"text-right\">Profit</TableHead>\n            <TableHead>Last Sold</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {products.map((product) => {\n            const sale = sales.find((s) => s.productId === product.id) || {\n              quantity: 0,\n              revenue: 0,\n              profit: 0,\n              lastSold: null,\n            };\n            return (\n              <TableRow key={product.id}>\n                <TableCell>{product.name}</TableCell>\n                <TableCell>{product.sku}</TableCell>\n                <TableCell className=\"text-right\">{sale.quantity}</TableCell>\n                <TableCell className=\"text-right\">\n                  ${sale.revenue.toFixed(2)}\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  ${sale.profit.toFixed(2)}\n                </TableCell>\n                <TableCell>\n                  {sale.lastSold\n                    ? new Date(sale.lastSold).toLocaleDateString()\n                    : \"Never\"}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/reports/SalesChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/__tests__/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/alert.tsx","messages":[{"ruleId":"jsx-a11y/heading-has-content","severity":2,"message":"Headings must have content and the content must be accessible by a screen reader.","line":39,"column":3,"nodeType":"JSXOpeningElement","endLine":43,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":55,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":56,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\",\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/card.tsx","messages":[{"ruleId":"jsx-a11y/heading-has-content","severity":2,"message":"Headings must have content and the content must be accessible by a screen reader.","line":36,"column":3,"nodeType":"JSXOpeningElement","endLine":43,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            },\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className,\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\",\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[710,761],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'cmdk-input-wrapper' found","line":42,"column":52,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":42,"endColumn":73}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,152],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/pagination.tsx","messages":[{"ruleId":"jsx-a11y/anchor-has-content","severity":2,"message":"Anchors must have content and the content must be accessible by a screen reader.","line":48,"column":3,"nodeType":"JSXOpeningElement","endLine":58,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n);\nPagination.displayName = \"Pagination\";\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n));\nPaginationContent.displayName = \"PaginationContent\";\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n));\nPaginationItem.displayName = \"PaginationItem\";\n\ntype PaginationLinkProps = {\n  isActive?: boolean;\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">;\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n);\nPaginationLink.displayName = \"PaginationLink\";\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n);\nPaginationPrevious.displayName = \"PaginationPrevious\";\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n);\nPaginationNext.displayName = \"PaginationNext\";\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n);\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n};\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,161],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/components/ui/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":16,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":16,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Inspired by react-hot-toast library\nimport * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/constants/categories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/constants/priceUnits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/contexts/CartContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1263,1266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1263,1266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2715,2718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2715,2718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3465,3468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3465,3468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4287,4290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4287,4290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useLocation } from \"wouter\";\nimport axios from \"axios\";\n\ninterface User {\n  id: number;\n  email: string;\n  name: string;\n  role: \"admin\" | \"user\";\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  lastCheck: number;\n  setUser: (user: User | null) => void;\n  setIsAuthenticated: (isAuthenticated: boolean) => void;\n  setIsLoading: (isLoading: boolean) => void;\n  setLastCheck: (lastCheck: number) => void;\n}\n\nconst useAuthStore = create<AuthState>((set) => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  lastCheck: 0,\n  setUser: (user) => set({ user, isAuthenticated: !!user }),\n  setIsAuthenticated: (isAuthenticated) => set({ isAuthenticated }),\n  setIsLoading: (isLoading) => set({ isLoading }),\n  setLastCheck: (lastCheck) => set({ lastCheck }),\n}));\n\nexport const useAuth = () => {\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const {\n    user,\n    isAuthenticated,\n    isLoading,\n    lastCheck,\n    setUser,\n    setIsAuthenticated,\n    setIsLoading,\n    setLastCheck,\n  } = useAuthStore();\n\n  const handleAuthError = (error: any, redirectToAuth: boolean = true) => {\n    console.error(\"Auth error:\", error);\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Only show toast for non-401 errors or when explicitly logging out\n    if (\n      !axios.isAxiosError(error) ||\n      error.response?.status !== 401 ||\n      !redirectToAuth\n    ) {\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication Error\",\n        description:\n          error.response?.data?.message ||\n          \"Session expired. Please log in again.\",\n      });\n    }\n\n    // Only redirect if we're not already on the auth page and redirection is requested\n    if (redirectToAuth && location !== \"/auth\") {\n      setLocation(\"/auth\");\n    }\n  };\n\n  const checkSession = async () => {\n    try {\n      // Skip check if we're on the auth page\n      if (location === \"/auth\") {\n        setIsLoading(false);\n        return;\n      }\n\n      // Skip check if we've checked recently (within 5 minutes) and have a user\n      const now = Date.now();\n      if (now - lastCheck < 5 * 60 * 1000 && user) {\n        setIsLoading(false);\n        return;\n      }\n\n      setIsLoading(true);\n      const response = await api.get(\"/auth/me\");\n\n      if (response.data.success && response.data.data) {\n        setUser(response.data.data);\n        setIsAuthenticated(true);\n        setLastCheck(now);\n      } else {\n        handleAuthError(new Error(\"Session invalid\"), true);\n      }\n    } catch (error: any) {\n      handleAuthError(error, true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      const response = await api.post(\"/auth/login\", { email, password });\n\n      if (!response.data.success) {\n        throw new Error(response.data.message || \"Invalid credentials\");\n      }\n\n      if (!response.data.data) {\n        throw new Error(\"No user data received\");\n      }\n\n      setUser(response.data.data);\n      setIsAuthenticated(true);\n      setLastCheck(Date.now());\n      setLocation(\"/pos\");\n\n      toast({\n        title: \"Success\",\n        description: response.data.message || \"Logged in successfully\",\n      });\n    } catch (error: any) {\n      // Don't show error toast for 401 responses as it will be handled by the form\n      if (!axios.isAxiosError(error) || error.response?.status !== 401) {\n        toast({\n          variant: \"destructive\",\n          title: \"Login Failed\",\n          description:\n            error.response?.data?.message ||\n            error.message ||\n            \"Failed to log in\",\n        });\n      }\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setIsLoading(true);\n      await api.post(\"/auth/logout\");\n      setUser(null);\n      setIsAuthenticated(false);\n\n      if (location !== \"/auth\") {\n        setLocation(\"/auth\");\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n    } catch (error: any) {\n      handleAuthError(error, true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    checkSession,\n    login,\n    logout,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-customers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-inventory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[842,845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[842,845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1116,1119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1116,1119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport type { Product, ProductFormData } from \"@/types/product\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\n\nexport function useInventory() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"products\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/products\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch products\");\n      }\n      const data = await response.json();\n      // Add detailed debug logging for price data\n      // console.log('Fetched products data:', JSON.stringify(data, null, 2));\n      const productsWithPricing = data.map((product: any) => {\n        // console.log('Processing product:', product.name, 'Price units:', product.price_units);\n        return {\n          ...product,\n          price_units: product.price_units || [],\n          default_unit_pricing:\n            product.price_units?.find((unit: any) => unit.is_default) || null,\n        };\n      });\n\n      if (isDevelopment && productsWithPricing.length === 0) {\n        console.debug(\"No products found\");\n      }\n\n      return productsWithPricing;\n    },\n  });\n\n  const createProductMutation = useMutation<Product, Error, ProductFormData>({\n    mutationFn: (product) =>\n      fetch(\"/api/products\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(product),\n        credentials: \"include\",\n      }).then((res) => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"products\"] });\n      toast({\n        title: \"Product created\",\n        description: \"New product has been added to inventory\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create product\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation<\n    Product,\n    Error,\n    Partial<ProductFormData> & { id: number }\n  >({\n    mutationFn: (product) =>\n      fetch(`/api/products/${product.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(product),\n        credentials: \"include\",\n      }).then((res) => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"products\"] });\n      toast({\n        title: \"Product updated\",\n        description: \"Product information has been updated\",\n      });\n    },\n  });\n\n  return {\n    products,\n    isLoading,\n    createProduct: createProductMutation.mutateAsync,\n    updateProduct: updateProductMutation.mutateAsync,\n    isCreating: createProductMutation.isPending,\n    isUpdating: updateProductMutation.isPending,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-loyalty.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-pos.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-products.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-purchase-orders.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PurchaseOrderFormData' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport type {\n  PurchaseOrder,\n  PurchaseOrderFormData,\n  PurchaseOrderItem,\n  PurchaseOrderSubmitData,\n} from \"@/types/purchase-order\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function usePurchaseOrders() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: purchaseOrders, isLoading } = useQuery<PurchaseOrder[]>({\n    queryKey: [\"purchase-orders\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/purchase-orders\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch purchase orders\");\n      }\n      return response.json();\n    },\n  });\n\n  const createPurchaseOrderMutation = useMutation({\n    mutationFn: async (data: PurchaseOrderSubmitData) => {\n      const response = await fetch(\"/api/purchase-orders\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create purchase order\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"purchase-orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase order created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updatePurchaseOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await fetch(`/api/purchase-orders/${id}/status`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update purchase order status\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"purchase-orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase order status updated successfully\",\n      });\n    },\n  });\n\n  const createPurchaseOrderItemMutation = useMutation({\n    mutationFn: async (data: PurchaseOrderItem) => {\n      const response = await fetch(\"/api/purchase-order-items\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create purchase order item\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"purchase-orders\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message,\n      });\n    },\n  });\n\n  return {\n    purchaseOrders,\n    isLoading,\n    createPurchaseOrder: createPurchaseOrderMutation.mutateAsync,\n    createPurchaseOrderItem: createPurchaseOrderItemMutation.mutateAsync,\n    isCreating: createPurchaseOrderMutation.isPending,\n    updatePurchaseOrderStatus: updatePurchaseOrderStatusMutation.mutateAsync,\n    isUpdating: updatePurchaseOrderStatusMutation.isPending,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-suppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":15,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":15,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/hooks/use-user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/lib/queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/lib/receipt-settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"n/handle-callback-err","severity":2,"message":"Expected error to be handled.","line":32,"column":34,"nodeType":"FunctionExpression","messageId":"expected","endLine":34,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":32,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":40},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkSession'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkSession]","fix":{"range":[1993,1995],"text":"[checkSession]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { StrictMode, useEffect } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport \"./index.css\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport PosPage from \"./pages/PosPage\";\nimport InventoryPage from \"./pages/InventoryPage\";\nimport CustomersPage from \"./pages/CustomersPage\";\nimport ReportsPage from \"./pages/ReportsPage\";\nimport AuthPage from \"./pages/AuthPage\";\nimport { SalesPage } from \"./pages/SalesPage\";\nimport ExpensesPage from \"./pages/ExpensesPage\";\nimport MainNav from \"./components/layout/MainNav\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { useToast } from \"./hooks/use-toast\";\nimport RoleBasedRoute from \"./components/auth/RoleBasedRoute\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\n// Custom error boundary for CartProvider\nclass CartErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(\"Cart error:\", error, errorInfo);\n    // Clean up potentially corrupted cart data\n    localStorage.removeItem(\"pos_cart_v2\");\n    localStorage.removeItem(\"pos_cart_v2_timestamp\");\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Reset state and render app without the error\n      setTimeout(() => this.setState({ hasError: false }), 100);\n      return this.props.fallback || this.props.children;\n    }\n    return this.props.children;\n  }\n}\n\nfunction App() {\n  const { checkSession, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  useEffect(() => {\n    checkSession();\n  }, []);\n\n  if (isLoading && location !== \"/auth\") {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <CartErrorBoundary>\n        <CartProvider>\n          <Router />\n          <Toaster />\n        </CartProvider>\n      </CartErrorBoundary>\n    </QueryClientProvider>\n  );\n}\n\nfunction ProtectedRoute({\n  component: Component,\n  roles,\n}: {\n  component: React.ComponentType;\n  roles?: (\"admin\" | \"user\")[];\n}) {\n  return (\n    <RoleBasedRoute allowedRoles={roles || [\"admin\", \"user\"]}>\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <MainNav />\n        <main className=\"flex-1 overflow-hidden\">\n          <Component />\n        </main>\n      </div>\n    </RoleBasedRoute>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route\n        path=\"/\"\n        component={() => (\n          <ProtectedRoute component={PosPage} roles={[\"admin\", \"user\"]} />\n        )}\n      />\n      <Route\n        path=\"/pos\"\n        component={() => (\n          <ProtectedRoute component={PosPage} roles={[\"admin\", \"user\"]} />\n        )}\n      />\n      <Route\n        path=\"/inventory\"\n        component={() => (\n          <ProtectedRoute component={InventoryPage} roles={[\"admin\", \"user\"]} />\n        )}\n      />\n      <Route\n        path=\"/customers\"\n        component={() => (\n          <ProtectedRoute component={CustomersPage} roles={[\"admin\"]} />\n        )}\n      />\n      <Route\n        path=\"/sales\"\n        component={() => (\n          <ProtectedRoute component={SalesPage} roles={[\"admin\"]} />\n        )}\n      />\n      <Route\n        path=\"/reports\"\n        component={() => (\n          <ProtectedRoute component={ReportsPage} roles={[\"admin\"]} />\n        )}\n      />\n      <Route\n        path=\"/expenses\"\n        component={() => (\n          <ProtectedRoute component={ExpensesPage} roles={[\"admin\", \"user\"]} />\n        )}\n      />\n      <Route\n        path=\"/profile\"\n        component={() => (\n          <ProtectedRoute component={ProfilePage} roles={[\"admin\", \"user\"]} />\n        )}\n      />\n      <Route>404 Page Not Found</Route>\n    </Switch>\n  );\n}\n\nconst root = document.getElementById(\"root\") as HTMLElement;\ncreateRoot(root).render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n);\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/AuthPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InsertUser' is defined but never used.","line":13,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLocation' is assigned a value but never used.","line":39,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { type InsertUser } from \"@/types/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Eye, EyeOff } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      name: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData | RegisterFormData) => {\n    try {\n      setIsLoading(true);\n      console.log(\"Sending auth request with data:\", {\n        ...data,\n        password: \"***\",\n      });\n\n      if (isLogin) {\n        await login(data.email, data.password);\n      } else {\n        const response = await fetch(`/api/auth/register`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n          credentials: \"include\",\n        });\n\n        const result = await response.json();\n\n        if (!response.ok) {\n          throw new Error(result.message || \"Registration failed\");\n        }\n\n        if (result.success) {\n          toast({\n            title: \"Success\",\n            description: \"Account created successfully\",\n          });\n          // After successful registration, log in automatically\n          await login(data.email, data.password);\n        } else {\n          throw new Error(result.message || \"Registration failed\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Auth error:\", error);\n      const form = isLogin ? loginForm : registerForm;\n\n      // Show error toast\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication Failed\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"Please check your credentials and try again\",\n      });\n\n      // Set form error\n      form.setError(\"root\", {\n        message:\n          error instanceof Error\n            ? error.message\n            : \"Authentication failed. Please check your credentials.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleMode = () => {\n    setIsLogin(!isLogin);\n    loginForm.reset();\n    registerForm.reset();\n  };\n\n  const form = isLogin ? loginForm : registerForm;\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>{isLogin ? \"Login\" : \"Register\"}</CardTitle>\n          <CardDescription>\n            {isLogin\n              ? \"Welcome back! Please login to continue.\"\n              : \"Create an account to get started.\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                disabled={isLoading}\n                {...form.register(\"email\")}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm font-medium text-destructive\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <label htmlFor=\"name\" className=\"text-sm font-medium\">\n                  Name\n                </label>\n                <Input\n                  id=\"name\"\n                  autoComplete=\"name\"\n                  disabled={isLoading}\n                  {...form.register(\"name\")}\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm font-medium text-destructive\">\n                    {form.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  autoComplete={isLogin ? \"current-password\" : \"new-password\"}\n                  disabled={isLoading}\n                  {...form.register(\"password\")}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm font-medium text-destructive\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            {form.formState.errors.root && (\n              <p className=\"text-sm font-medium text-destructive\">\n                {form.formState.errors.root.message}\n              </p>\n            )}\n\n            <div className=\"space-y-2\">\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    {isLogin ? \"Logging in...\" : \"Creating account...\"}\n                  </>\n                ) : isLogin ? (\n                  \"Login\"\n                ) : (\n                  \"Register\"\n                )}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                disabled={isLoading}\n                onClick={toggleMode}\n              >\n                {isLogin ? \"Need an account?\" : \"Already have an account?\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/CustomersPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Customer' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customersData' is assigned a value but never used.","line":27,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1735,1738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1735,1738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2505,2508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2505,2508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3149,3152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3149,3152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\";\nimport CustomerList from \"../components/customers/CustomerList\";\nimport type { Customer } from \"@/types/schema\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"@/store\";\nimport { fetchCustomers } from \"@/store/customersSlice\";\nimport { Customer as CustomerType } from \"@/types/customer\";\n\nconst CustomersPage = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const dispatch = useDispatch<AppDispatch>();\n  const customers = useSelector((state: RootState) => state.customers.items);\n  const customersStatus = useSelector(\n    (state: RootState) => state.customers.status,\n  );\n\n  useEffect(() => {\n    if (customersStatus === \"idle\") {\n      dispatch(fetchCustomers());\n    }\n  }, [dispatch, customersStatus]);\n\n  const { data: customersData = [], isLoading } = useQuery({\n    queryKey: [\"customers\"],\n    queryFn: async () => {\n      const response = await api.get(\"/customers\");\n      return response.data;\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (\n      customer: Omit<CustomerType, \"id\" | \"createdAt\" | \"updatedAt\">,\n    ) => {\n      const response = await api.post(\"/customers\", customer);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer added successfully.\",\n      });\n    },\n    onError: (error: unknown) => {\n      const message =\n        (error as any)?.response?.data?.message ||\n        (error as Error).message ||\n        \"Failed to add customer\";\n      toast({\n        title: \"Error\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCustomerMutation = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: number;\n      data: Partial<CustomerType>;\n    }) => {\n      const response = await api.put(`/customers/${id}`, data);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer updated successfully.\",\n      });\n    },\n    onError: (error: unknown) => {\n      const message =\n        (error as any)?.response?.data?.message ||\n        (error as Error).message ||\n        \"Failed to update customer\";\n      toast({\n        title: \"Error\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await api.delete(`/customers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer deleted successfully.\",\n      });\n    },\n    onError: (error: unknown) => {\n      const message =\n        (error as any)?.response?.data?.message ||\n        (error as Error).message ||\n        \"Failed to delete customer\";\n      toast({\n        title: \"Error\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddCustomer = async (\n    customer: Omit<CustomerType, \"id\" | \"createdAt\" | \"updatedAt\">,\n  ) => {\n    await createCustomerMutation.mutateAsync(customer);\n  };\n\n  const handleEditCustomer = (customer: CustomerType) => {\n    setSelectedCustomer(customer);\n    setFormData(customer);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteCustomer = async (id: number) => {\n    if (!window.confirm(\"Are you sure you want to delete this customer?\")) {\n      return;\n    }\n    await deleteCustomerMutation.mutateAsync(id);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">\n        <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <CustomerList\n        customers={customers}\n        onAdd={handleAddCustomer}\n        onEdit={handleEditCustomer}\n        onDelete={handleDeleteCustomer}\n        isSubmitting={\n          createCustomerMutation.isPending || updateCustomerMutation.isPending\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomersPage;\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/ExpensesPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkSession'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, authLoading, checkSession]","fix":{"range":[853,883],"text":"[isAuthenticated, authLoading, checkSession]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport ExpenseForm from \"../components/ExpenseForm\";\nimport ExpenseList from \"../components/ExpenseList\";\nimport type { Expense } from \"@/types/expense\";\nimport { expenseService } from \"@/services/expenseService\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\n\nexport default function ExpensesPage() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const {\n    user,\n    isAuthenticated,\n    isLoading: authLoading,\n    checkSession,\n  } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated && !authLoading) {\n      checkSession();\n    }\n  }, [isAuthenticated, authLoading]);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication Required\",\n        description: \"Please log in to access this page\",\n      });\n      setLocation(\"/auth\");\n    }\n  }, [isAuthenticated, authLoading, setLocation, toast]);\n\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery({\n    queryKey: [\"expenses\"],\n    queryFn: expenseService.getAll,\n    enabled: isAuthenticated,\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: expenseService.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"expenses\"] });\n      toast({\n        title: \"Success\",\n        description: \"Expense added successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Error creating expense:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to add expense. Please try again.\",\n      });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: expenseService.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"expenses\"] });\n      toast({\n        title: \"Success\",\n        description: \"Expense deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to delete expense\",\n      });\n    },\n  });\n\n  const handleAddExpense = (\n    newExpense: Omit<Expense, \"id\" | \"user_id\" | \"createdAt\" | \"updatedAt\">,\n  ) => {\n    if (!isAuthenticated || !user) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"You must be logged in to add expenses\",\n      });\n      return;\n    }\n\n    createExpenseMutation.mutate({\n      ...newExpense,\n      user_id: user.id,\n    });\n  };\n\n  const handleDeleteExpense = (expenseId: number) => {\n    if (!isAuthenticated) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"You must be logged in to delete expenses\",\n      });\n      return;\n    }\n    deleteExpenseMutation.mutate(expenseId);\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (expensesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 px-4 sm:px-6 md:px-8 max-w-6xl mx-auto\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Expense Tracker</h2>\n        <p className=\"text-muted-foreground\">\n          Manage and track your business expenses\n        </p>\n      </div>\n      <ExpenseForm onAddExpense={handleAddExpense} />\n      <ExpenseList expenses={expenses} onDeleteExpense={handleDeleteExpense} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/InventoryPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'STOCK_UNITS' is defined but never used.","line":14,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PRODUCT_CATEGORIES' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":23,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":23,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":23,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'productsError' is assigned a value but never used.","line":42,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleInputChange' is assigned a value but never used.","line":70,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleImageChange' is assigned a value but never used.","line":78,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":173,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5687,5690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5687,5690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Product, ProductFormData, STOCK_UNITS } from \"@/types/product\";\nimport { PRODUCT_CATEGORIES } from \"@/constants/categories\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Suppliers from \"@/components/inventory/Suppliers\";\nimport { PurchaseOrders } from \"@/components/inventory/PurchaseOrders\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"@/store\";\nimport { fetchProducts } from \"@/store/productsSlice\";\nimport ProductList from \"@/components/inventory/ProductList\";\nimport ProductFormDialog from \"@/components/inventory/ProductFormDialog\";\nimport ProductSearchBar from \"@/components/inventory/ProductSearchBar\";\nimport TabsNav from \"@/components/inventory/TabsNav\";\n\nconst InventoryPage: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const products = useSelector(\n    (state: RootState) => state.products.items as Product[],\n  );\n  const productsStatus = useSelector(\n    (state: RootState) => state.products.status,\n  );\n  const productsError = useSelector((state: RootState) => state.products.error);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"products\");\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const initialFormData: ProductFormData = {\n    name: \"\",\n    product_code: \"\",\n    category: \"\",\n    stock_unit: \"piece\",\n    quantity: 0,\n    min_stock: 0,\n    buying_price: \"0\",\n    selling_price: \"0\",\n  };\n\n  const [formData, setFormData] = useState<ProductFormData>(initialFormData);\n\n  useEffect(() => {\n    if (productsStatus === \"idle\") {\n      dispatch(fetchProducts());\n    }\n  }, [dispatch, productsStatus]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === \"number\" ? Number(value) : value,\n    }));\n  };\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setFormData((prev) => ({\n        ...prev,\n        image: file,\n      }));\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const formDataToSend = new FormData();\n\n      // Append all product data except image\n      Object.entries(formData).forEach(([key, value]) => {\n        if (key !== \"image\") {\n          formDataToSend.append(key, value.toString());\n        }\n      });\n\n      // Append image if exists\n      if (formData.image) {\n        formDataToSend.append(\"image\", formData.image);\n      }\n\n      const url = selectedProduct\n        ? `${import.meta.env.VITE_API_URL}/products/${selectedProduct.id}`\n        : `${import.meta.env.VITE_API_URL}/products`;\n\n      const response = await fetch(url, {\n        method: selectedProduct ? \"PUT\" : \"POST\",\n        body: formDataToSend,\n      });\n\n      if (!response.ok) throw new Error(\"Failed to save product\");\n\n      toast({\n        title: \"Success\",\n        description: `Product ${selectedProduct ? \"updated\" : \"created\"} successfully`,\n      });\n\n      setFormData(initialFormData);\n      setIsAddDialogOpen(false);\n      setIsEditDialogOpen(false);\n      dispatch(fetchProducts());\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to ${selectedProduct ? \"update\" : \"create\"} product`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setSelectedProduct(product);\n    setFormData({\n      name: product.name,\n      product_code: product.product_code || \"\",\n      category: product.category,\n      stock_unit: product.stock_unit,\n      quantity: product.quantity,\n      min_stock: product.min_stock,\n      buying_price: product.buying_price,\n      selling_price: product.selling_price,\n    });\n    setImagePreview(product.image_url);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    if (!window.confirm(\"Are you sure you want to delete this product?\"))\n      return;\n\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/products/${id}`,\n        {\n          method: \"DELETE\",\n        },\n      );\n\n      if (!response.ok) {\n        // Try to extract the error message from the response\n        let errorMsg = \"Failed to delete product\";\n        try {\n          const errorData = await response.json();\n          if (errorData && errorData.message) {\n            errorMsg = errorData.message;\n          }\n        } catch (e) {}\n        throw new Error(errorMsg);\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n\n      dispatch(fetchProducts());\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/products/search?query=${searchQuery}`,\n      );\n      if (!response.ok) throw new Error(\"Failed to search products\");\n      const data = await response.json();\n      dispatch(fetchProducts(data));\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to search products\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <TabsNav activeTab={activeTab} setActiveTab={setActiveTab} />\n      <div className=\"flex justify-between items-center mb-4\">\n        {activeTab === \"products\" && (\n          <>\n            <ProductSearchBar\n              searchQuery={searchQuery}\n              setSearchQuery={setSearchQuery}\n              onSearch={handleSearch}\n            />\n            <Button onClick={() => setIsAddDialogOpen(true)}>\n              Add Product\n            </Button>\n          </>\n        )}\n      </div>\n      {activeTab === \"products\" && (\n        <ProductList\n          products={products}\n          onEdit={handleEdit}\n          onDelete={handleDelete}\n        />\n      )}\n      <ProductFormDialog\n        open={isAddDialogOpen || isEditDialogOpen}\n        onOpenChange={(open) => {\n          setIsAddDialogOpen(open);\n          setIsEditDialogOpen(open);\n        }}\n        formData={formData}\n        setFormData={setFormData}\n        imagePreview={imagePreview}\n        setImagePreview={setImagePreview}\n        onSubmit={handleSubmit}\n        selectedProduct={selectedProduct}\n      />\n      {activeTab === \"suppliers\" && <Suppliers />}\n      {activeTab === \"purchase-orders\" && <PurchaseOrders />}\n    </div>\n  );\n};\n\nexport default InventoryPage;\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/PosPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CartItem' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":9,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":9,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":9,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScrollArea' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCustomers' and 'fetchProducts'. Either include them or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCustomers, fetchProducts]","fix":{"range":[2412,2414],"text":"[fetchCustomers, fetchProducts]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchSaleDetails' is assigned a value but never used.","line":469,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":469,"endColumn":25}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { Product } from \"@/types/product\";\nimport type { CartItem } from \"@/types/pos\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle, RefreshCcw } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useCart } from \"@/contexts/CartContext\";\n\nconst STOCK_UNITS = [\"piece\", \"pack\", \"dozen\"] as const;\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1500;\n\nconst PosPage: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const {\n    cart,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    updateUnitPrice,\n    updateUnitType,\n    clearCart,\n    addDeliveryService,\n  } = useCart();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const [selectedCustomer, setSelectedCustomer] = useState<number | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<\"cash\" | \"mpesa\">(\"cash\");\n  const [isCheckoutDialogOpen, setIsCheckoutDialogOpen] = useState(false);\n  const [customers, setCustomers] = useState<\n    Array<{ id: number; name: string; phone?: string }>\n  >([]);\n  const [isReceiptDialogOpen, setIsReceiptDialogOpen] = useState(false);\n  const [currentSaleId, setCurrentSaleId] = useState<number | null>(null);\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isSendingReceipt, setIsSendingReceipt] = useState(false);\n  const [isLoading, setIsLoading] = useState({\n    products: false,\n    customers: false,\n    checkout: false,\n  });\n  const [apiError, setApiError] = useState({\n    products: false,\n    customers: false,\n  });\n\n  useEffect(() => {\n    fetchProducts();\n    fetchCustomers();\n  }, []);\n\n  const fetchWithRetry = async (\n    url: string,\n    options: RequestInit = {},\n    retries = MAX_RETRIES,\n  ) => {\n    try {\n      console.log(`Fetching ${url} with options:`, options);\n      const response = await fetch(url, options);\n\n      // Log the response status to help with debugging\n      console.log(`Response status: ${response.status} for ${url}`);\n\n      // First check if the response is ok (status in the range 200-299)\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Server error: ${response.status}`, errorText);\n        throw new Error(\n          `Server returned ${response.status}: ${errorText || \"No error details\"}`,\n        );\n      }\n\n      // Then try to parse the JSON\n      try {\n        const data = await response.json();\n        console.log(`Response data for ${url}:`, data);\n        return data;\n      } catch (parseError) {\n        console.error(\"JSON parse error:\", parseError);\n        throw new Error(\"Invalid JSON response from server\");\n      }\n    } catch (error) {\n      console.error(`Fetch error for ${url}:`, error);\n\n      // If we have retries left, wait and try again\n      if (retries > 0) {\n        console.log(`Retrying ${url}, ${retries} attempts left`);\n        await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY));\n        return fetchWithRetry(url, options, retries - 1);\n      }\n\n      // No more retries, rethrow the error\n      throw error;\n    }\n  };\n\n  const fetchProducts = async () => {\n    setIsLoading((prev) => ({ ...prev, products: true }));\n    setApiError((prev) => ({ ...prev, products: false }));\n\n    try {\n      const data = await fetchWithRetry(\n        `${import.meta.env.VITE_API_URL}/products`,\n        { credentials: \"include\" },\n      );\n      setProducts(data);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      setApiError((prev) => ({ ...prev, products: true }));\n      toast({\n        title: \"Connection Error\",\n        description:\n          \"Could not connect to the server. Please check your connection and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading((prev) => ({ ...prev, products: false }));\n    }\n  };\n\n  const fetchCustomers = async () => {\n    setIsLoading((prev) => ({ ...prev, customers: true }));\n    setApiError((prev) => ({ ...prev, customers: false }));\n\n    try {\n      const data = await fetchWithRetry(\n        `${import.meta.env.VITE_API_URL}/customers`,\n        { credentials: \"include\" },\n      );\n      setCustomers(data);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      setApiError((prev) => ({ ...prev, customers: true }));\n      toast({\n        title: \"Connection Error\",\n        description:\n          \"Could not connect to the server. Please check your connection and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading((prev) => ({ ...prev, customers: false }));\n    }\n  };\n\n  const calculateUnitPrice = (product: Product): number => {\n    const numericPrice = parseFloat(product.selling_price);\n    switch (product.stock_unit) {\n      case \"dozen\":\n        return numericPrice / 12;\n      case \"pack\":\n        return numericPrice / 6;\n      default:\n        return numericPrice;\n    }\n  };\n\n  // Add a function to get or create a delivery service product\n  const getDeliveryServiceProduct = useCallback(() => {\n    // Try to find the delivery service in the products array\n    const existingService = products.find((p) => p.product_code === \"SRV001\");\n\n    if (existingService) {\n      console.log(\"Found existing delivery service:\", existingService);\n      return existingService;\n    }\n\n    // If not found, create a fallback delivery service\n    console.log(\"Creating fallback delivery service\");\n    const fallbackDeliveryService = {\n      id: -1, // Use a negative ID to indicate it's not from the database\n      name: \"Delivery Service\",\n      product_code: \"SRV001\",\n      description: \"Delivery service fee\",\n      category_id: null,\n      selling_price: \"200\",\n      buying_price: \"0\",\n      quantity: 999,\n      available_units: 999,\n      stock_unit: \"piece\",\n      image_url: null,\n      barcode: null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n\n    return fallbackDeliveryService;\n  }, [products]);\n\n  const handleAddDelivery = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      // Prevent default behavior and stop propagation to isolate this event\n      if (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      try {\n        // Find or create delivery service product\n        const deliveryService = getDeliveryServiceProduct();\n        console.log(\"ADD DELIVERY - Delivery service:\", deliveryService);\n\n        if (!deliveryService) {\n          console.error(\"ADD DELIVERY - Failed to create delivery service\");\n          toast({\n            title: \"Error\",\n            description: \"Failed to create delivery service\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        // Check if delivery is already in cart\n        const hasDelivery = cart.items.some(\n          (item) => item.product && item.product.product_code === \"SRV001\",\n        );\n\n        console.log(\"ADD DELIVERY - Delivery already in cart:\", hasDelivery);\n\n        if (hasDelivery) {\n          toast({\n            title: \"Error\",\n            description: \"Delivery charge already added\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        // Add the delivery service using the context function\n        addDeliveryService(deliveryService);\n\n        toast({\n          title: \"Success\",\n          description: \"Delivery service added to cart\",\n        });\n      } catch (error) {\n        console.error(\"ADD DELIVERY - Error:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to add delivery service. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [cart, getDeliveryServiceProduct, toast, addDeliveryService],\n  );\n\n  const handleAddProductToCart = (product: Product) => {\n    // Special handling for delivery service\n    if (product.product_code === \"SRV001\") {\n      const hasDelivery = cart.items.some(\n        (item) => item.product.product_code === \"SRV001\",\n      );\n      if (hasDelivery) {\n        toast({\n          title: \"Error\",\n          description: \"Delivery charge already added\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    addToCart(product);\n  };\n\n  const handleRemoveItem = (itemId: number) => {\n    removeFromCart(itemId);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/products/search?q=${searchQuery}`,\n      );\n      if (!response.ok) throw new Error(\"Failed to search products\");\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to search products\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCheckout = async () => {\n    try {\n      setIsLoading((prev) => ({ ...prev, checkout: true }));\n\n      if (cart.items.length === 0) {\n        toast({\n          title: \"Error\",\n          description: \"Cart is empty\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Format sale data for API\n      const saleData = {\n        items: cart.items.map((item) => {\n          // Special handling for delivery service\n          if (item.product.product_code === \"SRV001\") {\n            console.log(\"CHECKOUT - Processing delivery service item\");\n          }\n\n          return {\n            product_id: item.product.id,\n            quantity: item.quantity,\n            unit_price: item.unit_price,\n            total: item.total,\n            unit_type: item.unit_type || item.product.stock_unit,\n          };\n        }),\n        total: cart.total,\n        customer_id: selectedCustomer,\n        payment_method: paymentMethod,\n        status: \"completed\",\n        payment_status: \"paid\",\n        amount_paid: cart.total,\n        change_amount: 0,\n      };\n\n      console.log(\"CHECKOUT - Sending sale data:\", JSON.stringify(saleData));\n\n      // Attempt to create the sale\n      const response = await fetchWithRetry(\n        `${import.meta.env.VITE_API_URL}/sales`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(saleData),\n          credentials: \"include\",\n        },\n      );\n\n      console.log(\"CHECKOUT - Sale created successfully, response:\", response);\n\n      // Verify response format and extract sale ID\n      let saleId;\n      if (response && response.data && response.data.id) {\n        saleId = response.data.id;\n      } else if (response && response.id) {\n        saleId = response.id;\n      } else {\n        throw new Error(\"Invalid server response format\");\n      }\n\n      // Success - show toast and clear cart\n      toast({\n        title: \"Success\",\n        description: \"Checkout successful!\",\n      });\n\n      // ONLY clear the cart after successful checkout using the context function\n      clearCart();\n\n      // Close the checkout dialog immediately\n      setIsCheckoutDialogOpen(false);\n\n      // Set the sale ID for the receipt dialog\n      setCurrentSaleId(saleId);\n\n      // Pre-fill the phone number if available\n      const customer = customers.find((c) => c.id === selectedCustomer);\n      if (customer?.phone) {\n        setPhoneNumber(customer.phone);\n      }\n\n      // Open the receipt dialog immediately\n      setIsReceiptDialogOpen(true);\n    } catch (error) {\n      console.error(\"CHECKOUT - Error:\", error);\n\n      // Show detailed error message\n      toast({\n        title: \"Server Error\",\n        description:\n          error instanceof Error\n            ? `Failed to complete checkout: ${error.message}`\n            : \"Failed to complete checkout. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading((prev) => ({ ...prev, checkout: false }));\n    }\n  };\n\n  const handleSendReceipt = async (method: \"whatsapp\" | \"sms\") => {\n    try {\n      if (!currentSaleId || !phoneNumber) {\n        toast({\n          title: \"Error\",\n          description: \"Missing sale ID or phone number\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setIsSendingReceipt(true);\n\n      const response = await fetchWithRetry(\n        `${import.meta.env.VITE_API_URL}/sales/${currentSaleId}/receipt/${method}`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ phoneNumber }),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response) {\n        throw new Error(`Failed to send ${method} receipt`);\n      }\n\n      toast({\n        title: \"Success\",\n        description: `Receipt sent via ${method === \"whatsapp\" ? \"WhatsApp\" : \"SMS\"}!`,\n      });\n\n      // Close the dialog after sending\n      setTimeout(() => {\n        setIsReceiptDialogOpen(false);\n        setPhoneNumber(\"\");\n        setCurrentSaleId(null);\n      }, 2000);\n    } catch (error) {\n      console.error(`Error sending ${method} receipt:`, error);\n      toast({\n        title: \"Error\",\n        description: `Failed to send receipt via ${method === \"whatsapp\" ? \"WhatsApp\" : \"SMS\"}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSendingReceipt(false);\n    }\n  };\n\n  // Add a new function to fetch sale details for the receipt\n  const fetchSaleDetails = async (saleId: number) => {\n    try {\n      const response = await fetchWithRetry(\n        `${import.meta.env.VITE_API_URL}/sales/${saleId}`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n        },\n      );\n\n      if (!response) {\n        throw new Error(\"Failed to fetch sale details\");\n      }\n\n      return response;\n    } catch (error) {\n      console.error(\"Error fetching sale details:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load receipt details\",\n        variant: \"destructive\",\n      });\n      return null;\n    }\n  };\n\n  return (\n    <div className=\"h-[calc(100vh-4rem)] overflow-hidden px-2 mx-auto\">\n      <div className=\"grid grid-cols-12 h-full\">\n        {/* Products Section */}\n        <div className=\"col-span-8 h-full p-4 overflow-hidden flex flex-col\">\n          {apiError.products && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Connection Error</AlertTitle>\n              <AlertDescription>\n                Could not connect to the server.\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={fetchProducts}\n                  className=\"ml-2\"\n                >\n                  <RefreshCcw className=\"h-4 w-4 mr-1\" /> Retry\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex gap-2 mb-4\">\n            <Input\n              placeholder=\"Search products...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1\"\n            />\n            <Button onClick={handleSearch}>Search</Button>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {isLoading.products\n                ? // Show loading skeletons\n                  Array(8)\n                    .fill(0)\n                    .map((_, index) => (\n                      <Card key={index} className=\"overflow-hidden\">\n                        <CardContent className=\"p-4\">\n                          <Skeleton className=\"h-32 w-full mb-2\" />\n                          <Skeleton className=\"h-5 w-full mb-2\" />\n                          <Skeleton className=\"h-4 w-2/3 mb-2\" />\n                          <Skeleton className=\"h-4 w-1/2\" />\n                        </CardContent>\n                      </Card>\n                    ))\n                : // Filter out the delivery service from the grid\n                  products\n                    .filter((product) => product.product_code !== \"SRV001\")\n                    .map((product) => (\n                      <Card\n                        key={product.id}\n                        className=\"cursor-pointer hover:bg-gray-50\"\n                        onClick={() => handleAddProductToCart(product)}\n                      >\n                        <CardContent className=\"p-4\">\n                          {product.image_url && (\n                            <img\n                              src={product.image_url}\n                              alt={product.name}\n                              className=\"w-full h-32 object-cover rounded-md mb-2\"\n                            />\n                          )}\n                          <h3 className=\"font-semibold\">{product.name}</h3>\n                          <p className=\"text-sm text-gray-600\">\n                            Stock: {product.quantity} {product.stock_unit}\n                            {product.available_units !== product.quantity && (\n                              <span className=\"ml-2\">\n                                ({product.available_units} pieces)\n                              </span>\n                            )}\n                          </p>\n                          <p className=\"text-sm font-medium\">\n                            KSh {calculateUnitPrice(product).toFixed(2)} per\n                            piece\n                          </p>\n                        </CardContent>\n                      </Card>\n                    ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Cart Section */}\n        <div className=\"col-span-4 h-full p-4 overflow-hidden\">\n          <Card className=\"h-full\">\n            <CardContent className=\"h-full flex flex-col p-4\">\n              <h2 className=\"text-xl font-bold mb-4\">Cart</h2>\n              <div className=\"flex-1 overflow-y-auto\">\n                <div className=\"space-y-4\">\n                  {cart.items.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex items-start gap-2 pb-4 border-b\"\n                    >\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\">{item.product.name}</h3>\n                        <div className=\"mt-1\">\n                          <Label className=\"text-sm text-gray-600\">\n                            Price per unit\n                          </Label>\n                          <Input\n                            type=\"number\"\n                            value={item.unit_price}\n                            onChange={(e) =>\n                              updateUnitPrice(\n                                item.id,\n                                parseFloat(e.target.value) || 0,\n                              )\n                            }\n                            className=\"h-8 text-sm mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              updateQuantity(item.id, item.quantity - 1);\n                            }}\n                            disabled={item.product.product_code === \"SRV001\"}\n                          >\n                            -\n                          </Button>\n                          <Input\n                            type=\"number\"\n                            value={item.quantity}\n                            onChange={(e) =>\n                              updateQuantity(\n                                item.id,\n                                parseInt(e.target.value) || 0,\n                              )\n                            }\n                            className=\"w-20 text-center\"\n                            disabled={item.product.product_code === \"SRV001\"}\n                          />\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              updateQuantity(item.id, item.quantity + 1);\n                            }}\n                            disabled={item.product.product_code === \"SRV001\"}\n                          >\n                            +\n                          </Button>\n                        </div>\n                        <div className=\"mt-2\">\n                          <Select\n                            value={item.unit_type || item.product.stock_unit}\n                            onValueChange={(value) =>\n                              updateUnitType(item.id, value)\n                            }\n                            disabled={item.product.product_code === \"SRV001\"}\n                          >\n                            <SelectTrigger className=\"w-[120px]\">\n                              <SelectValue placeholder=\"Select unit\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {STOCK_UNITS.map((unit) => (\n                                <SelectItem key={unit} value={unit}>\n                                  {unit.charAt(0).toUpperCase() + unit.slice(1)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">\n                          KSh {item.total.toFixed(2)}\n                        </p>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-red-500 hover:text-red-700\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            handleRemoveItem(item.id);\n                          }}\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"mt-4 pt-4 border-t\">\n                <div className=\"flex justify-between items-center text-lg font-bold\">\n                  <span>Total:</span>\n                  <span>KSh {cart.total.toFixed(2)}</span>\n                </div>\n                <div className=\"flex gap-2 mt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      const button = e.currentTarget;\n                      // Disable button temporarily to prevent double-clicks\n                      button.disabled = true;\n                      try {\n                        handleAddDelivery(e);\n                      } finally {\n                        // Re-enable after a short delay\n                        setTimeout(() => {\n                          button.disabled = false;\n                        }, 1000);\n                      }\n                    }}\n                    disabled={isLoading.products || apiError.products}\n                  >\n                    Add Delivery (KSh 200)\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    className=\"flex-1\"\n                    onClick={() => setIsCheckoutDialogOpen(true)}\n                    disabled={cart.items.length === 0 || isLoading.checkout}\n                  >\n                    {isLoading.checkout\n                      ? \"Processing...\"\n                      : \"Proceed to Checkout\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Checkout Dialog */}\n      <Dialog\n        open={isCheckoutDialogOpen}\n        onOpenChange={setIsCheckoutDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Complete Sale</DialogTitle>\n            <DialogDescription>\n              Select payment method and customer details\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label>Payment Method</Label>\n              <Select\n                value={paymentMethod}\n                onValueChange={(value: \"cash\" | \"mpesa\") =>\n                  setPaymentMethod(value)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select payment method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"mpesa\">M-Pesa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Customer (Optional)</Label>\n              <Select\n                value={\n                  selectedCustomer ? selectedCustomer.toString() : \"walk_in\"\n                }\n                onValueChange={(value) =>\n                  setSelectedCustomer(\n                    value !== \"walk_in\" ? parseInt(value) : null,\n                  )\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select customer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"walk_in\">Walk-in Customer</SelectItem>\n                  {customers.map((customer) => (\n                    <SelectItem\n                      key={customer.id}\n                      value={customer.id.toString()}\n                    >\n                      {customer.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"pt-4 space-y-2\">\n              <div className=\"flex justify-between text-lg font-bold\">\n                <span>Total Amount:</span>\n                <span>KSh {cart.total.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsCheckoutDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button onClick={handleCheckout} disabled={isLoading.checkout}>\n              {isLoading.checkout ? \"Processing...\" : \"Complete Sale\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Receipt Dialog */}\n      <Dialog\n        open={isReceiptDialogOpen}\n        onOpenChange={(open) => {\n          // Only allow manual closing, not auto-closing\n          if (!open && !isSendingReceipt) {\n            setIsReceiptDialogOpen(false);\n          }\n        }}\n      >\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Sale Receipt</DialogTitle>\n            <DialogDescription>\n              Sale #{currentSaleId} completed successfully\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label>Phone Number</Label>\n              <Input\n                type=\"tel\"\n                placeholder=\"+254...\"\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n              />\n            </div>\n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>Send a receipt to the customer via WhatsApp or SMS</p>\n            </div>\n          </div>\n          <DialogFooter className=\"flex gap-2 sm:justify-end\">\n            <Button\n              variant=\"outline\"\n              onClick={() => handleSendReceipt(\"sms\")}\n              disabled={!phoneNumber || isSendingReceipt}\n            >\n              Send via SMS\n            </Button>\n            <Button\n              onClick={() => handleSendReceipt(\"whatsapp\")}\n              disabled={!phoneNumber || isSendingReceipt}\n            >\n              Send via WhatsApp\n            </Button>\n            <Button\n              variant=\"ghost\"\n              onClick={() => setIsReceiptDialogOpen(false)}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default PosPage;\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/ProfilePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkSession'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, authLoading, checkSession]","fix":{"range":[1858,1888],"text":"[isAuthenticated, authLoading, checkSession]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Loader2, User, Save, Eye, EyeOff } from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function ProfilePage() {\n  const {\n    user,\n    isAuthenticated,\n    isLoading: authLoading,\n    checkSession,\n  } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Form states\n  const [profileData, setProfileData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [preferences, setPreferences] = useState({\n    darkMode: false,\n    notifications: true,\n    language: \"english\",\n  });\n\n  const [showPassword, setShowPassword] = useState({\n    current: false,\n    new: false,\n    confirm: false,\n  });\n\n  const [isLoading, setIsLoading] = useState({\n    profile: false,\n    password: false,\n  });\n\n  const [errors, setErrors] = useState({\n    profile: \"\",\n    password: \"\",\n  });\n\n  useEffect(() => {\n    if (!isAuthenticated && !authLoading) {\n      checkSession();\n    }\n  }, [isAuthenticated, authLoading]);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication Required\",\n        description: \"Please log in to access this page\",\n      });\n      setLocation(\"/auth\");\n    }\n  }, [isAuthenticated, authLoading, setLocation, toast]);\n\n  // Initialize profile data when user data is loaded\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        name: user.name || \"\",\n        email: user.email || \"\",\n        phone: user.phone || \"\",\n      });\n    }\n  }, [user]);\n\n  const handleUpdateProfile = async (e) => {\n    e.preventDefault();\n    setIsLoading((prev) => ({ ...prev, profile: true }));\n    setErrors((prev) => ({ ...prev, profile: \"\" }));\n\n    try {\n      // Validate inputs\n      if (!profileData.name.trim()) {\n        throw new Error(\"Name is required\");\n      }\n\n      if (!profileData.email.trim()) {\n        throw new Error(\"Email is required\");\n      }\n\n      // In a real app, this would be an API call to update the user profile\n      // await api.put('/users/profile', profileData);\n\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    } catch (error) {\n      setErrors((prev) => ({\n        ...prev,\n        profile:\n          error instanceof Error ? error.message : \"Failed to update profile\",\n      }));\n\n      toast({\n        variant: \"destructive\",\n        title: \"Update Failed\",\n        description:\n          error instanceof Error ? error.message : \"Failed to update profile\",\n      });\n    } finally {\n      setIsLoading((prev) => ({ ...prev, profile: false }));\n    }\n  };\n\n  const handleChangePassword = async (e) => {\n    e.preventDefault();\n    setIsLoading((prev) => ({ ...prev, password: true }));\n    setErrors((prev) => ({ ...prev, password: \"\" }));\n\n    try {\n      // Validate passwords\n      if (!passwordData.currentPassword) {\n        throw new Error(\"Current password is required\");\n      }\n\n      if (!passwordData.newPassword) {\n        throw new Error(\"New password is required\");\n      }\n\n      if (passwordData.newPassword.length < 8) {\n        throw new Error(\"Password must be at least 8 characters\");\n      }\n\n      if (passwordData.newPassword !== passwordData.confirmPassword) {\n        throw new Error(\"Passwords do not match\");\n      }\n\n      // In a real app, this would be an API call to change the password\n      // await api.post('/users/change-password', passwordData);\n\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Clear password fields after successful update\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Password changed successfully\",\n      });\n    } catch (error) {\n      setErrors((prev) => ({\n        ...prev,\n        password:\n          error instanceof Error ? error.message : \"Failed to change password\",\n      }));\n\n      toast({\n        variant: \"destructive\",\n        title: \"Password Change Failed\",\n        description:\n          error instanceof Error ? error.message : \"Failed to change password\",\n      });\n    } finally {\n      setIsLoading((prev) => ({ ...prev, password: false }));\n    }\n  };\n\n  const handleTogglePassword = (field) => {\n    setShowPassword((prev) => ({\n      ...prev,\n      [field]: !prev[field],\n    }));\n  };\n\n  const handlePreferenceChange = (key, value) => {\n    setPreferences((prev) => ({\n      ...prev,\n      [key]: value,\n    }));\n\n    toast({\n      title: \"Preference Updated\",\n      description: `${key.charAt(0).toUpperCase() + key.slice(1)} setting updated`,\n    });\n  };\n\n  if (authLoading || !isAuthenticated || !user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 px-4 sm:px-6 md:px-8 max-w-6xl mx-auto pt-6\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">User Profile</h2>\n        <p className=\"text-muted-foreground\">\n          Manage your account settings and preferences\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"profile\" className=\"w-full\">\n        <TabsList className=\"grid w-full md:w-auto md:inline-grid grid-cols-2 md:grid-cols-3\">\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\" className=\"space-y-4 mt-6\">\n          <Card>\n            <form onSubmit={handleUpdateProfile}>\n              <CardHeader>\n                <CardTitle>Personal Information</CardTitle>\n                <CardDescription>\n                  Update your personal information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-center mb-8\">\n                  <div className=\"h-24 w-24 rounded-full bg-muted flex items-center justify-center\">\n                    <User className=\"h-12 w-12 text-muted-foreground\" />\n                  </div>\n                </div>\n\n                {errors.profile && (\n                  <Alert variant=\"destructive\" className=\"mb-4\">\n                    <AlertDescription>{errors.profile}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={profileData.name}\n                      onChange={(e) =>\n                        setProfileData({ ...profileData, name: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          email: e.target.value,\n                        })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={profileData.phone}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          phone: e.target.value,\n                        })\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Role</Label>\n                    <Input\n                      value={\n                        user.role\n                          ? user.role.charAt(0).toUpperCase() +\n                            user.role.slice(1)\n                          : \"\"\n                      }\n                      disabled\n                    />\n                  </div>\n                </div>\n\n                <div className=\"pt-4\">\n                  <Label>Member Since</Label>\n                  <p>\n                    {user.createdAt\n                      ? new Date(user.createdAt).toLocaleDateString()\n                      : \"N/A\"}\n                  </p>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-end\">\n                <Button type=\"submit\" disabled={isLoading.profile}>\n                  {isLoading.profile ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Updating...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"mr-2 h-4 w-4\" />\n                      Save Changes\n                    </>\n                  )}\n                </Button>\n              </CardFooter>\n            </form>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-4 mt-6\">\n          <Card>\n            <form onSubmit={handleChangePassword}>\n              <CardHeader>\n                <CardTitle>Password Settings</CardTitle>\n                <CardDescription>Update your password</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {errors.password && (\n                  <Alert variant=\"destructive\" className=\"mb-4\">\n                    <AlertDescription>{errors.password}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"currentPassword\"\n                        type={showPassword.current ? \"text\" : \"password\"}\n                        value={passwordData.currentPassword}\n                        onChange={(e) =>\n                          setPasswordData({\n                            ...passwordData,\n                            currentPassword: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => handleTogglePassword(\"current\")}\n                      >\n                        {showPassword.current ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"newPassword\"\n                        type={showPassword.new ? \"text\" : \"password\"}\n                        value={passwordData.newPassword}\n                        onChange={(e) =>\n                          setPasswordData({\n                            ...passwordData,\n                            newPassword: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => handleTogglePassword(\"new\")}\n                      >\n                        {showPassword.new ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Password must be at least 8 characters\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">\n                      Confirm New Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showPassword.confirm ? \"text\" : \"password\"}\n                        value={passwordData.confirmPassword}\n                        onChange={(e) =>\n                          setPasswordData({\n                            ...passwordData,\n                            confirmPassword: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => handleTogglePassword(\"confirm\")}\n                      >\n                        {showPassword.confirm ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-end\">\n                <Button type=\"submit\" disabled={isLoading.password}>\n                  {isLoading.password ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Updating...\n                    </>\n                  ) : (\n                    \"Change Password\"\n                  )}\n                </Button>\n              </CardFooter>\n            </form>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Two-Factor Authentication</CardTitle>\n              <CardDescription>\n                Add an extra layer of security to your account\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Secure your account with 2FA\n                  </p>\n                </div>\n                <Button variant=\"outline\">Set Up 2FA</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preferences\" className=\"space-y-4 mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Application Settings</CardTitle>\n              <CardDescription>\n                Customize your application experience\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Dark Mode</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Toggle dark mode\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences.darkMode}\n                  onCheckedChange={(checked) =>\n                    handlePreferenceChange(\"darkMode\", checked)\n                  }\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Notifications</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive system notifications\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences.notifications}\n                  onCheckedChange={(checked) =>\n                    handlePreferenceChange(\"notifications\", checked)\n                  }\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">Language</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select your preferred language\n                </p>\n                <Select\n                  value={preferences.language}\n                  onValueChange={(value) =>\n                    handlePreferenceChange(\"language\", value)\n                  }\n                >\n                  <SelectTrigger className=\"w-full md:w-[240px]\">\n                    <SelectValue placeholder=\"Select language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"english\">English</SelectItem>\n                    <SelectItem value=\"swahili\">Swahili</SelectItem>\n                    <SelectItem value=\"french\">French</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/ReportsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Product' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customers' is assigned a value but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomers' is assigned a value but never used.","line":11,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedCustomer' is assigned a value but never used.","line":12,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateRange' is assigned a value but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sortBy' is assigned a value but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ProductPerformance from \"../components/reports/ProductPerformance\";\nimport CustomerHistory from \"../components/reports/CustomerHistory\";\nimport InventoryStatus from \"../components/reports/InventoryStatus\";\nimport type { Product, Customer } from \"@/types/schema\";\nimport { useInventory } from \"@/hooks/use-inventory\";\n\nexport default function ReportsPage() {\n  const { products, isLoading } = useInventory();\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(\n    null,\n  );\n  const [dateRange, setDateRange] = useState<{ start: Date; end: Date } | null>(\n    null,\n  );\n  const [sortBy, setSortBy] = useState<string>(\"revenue\");\n\n  const handleDateRangeChange = (start: Date, end: Date) => {\n    setDateRange({ start, end });\n  };\n\n  const handleSortChange = (value: string) => {\n    setSortBy(value);\n  };\n\n  const handleSearch = async (query: string) => {\n    try {\n      const response = await fetch(\n        `/api/products/search?q=${encodeURIComponent(query)}`,\n      );\n      if (!response.ok) throw new Error(\"Failed to search products\");\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error(\"Error searching products:\", error);\n    }\n  };\n\n  const handleFilter = async (category: string) => {\n    try {\n      const url = category\n        ? `/api/products?category=${encodeURIComponent(category)}`\n        : \"/api/products\";\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(\"Failed to filter products\");\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error(\"Error filtering products:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <Tabs defaultValue=\"inventory\">\n        <TabsList>\n          <TabsTrigger value=\"inventory\">Inventory Status</TabsTrigger>\n          <TabsTrigger value=\"performance\">Product Performance</TabsTrigger>\n          <TabsTrigger value=\"customers\">Customer History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"inventory\">\n          <InventoryStatus\n            products={products || []}\n            onSearch={handleSearch}\n            onFilter={handleFilter}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"performance\">\n          <ProductPerformance\n            products={products || []}\n            sales={[]} // Add your sales data here\n            onDateRangeChange={handleDateRangeChange}\n            onSortChange={handleSortChange}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"customers\">\n          {selectedCustomer ? (\n            <CustomerHistory\n              customer={selectedCustomer}\n              transactions={[]} // Add your transaction data here\n              onDateRangeChange={handleDateRangeChange}\n            />\n          ) : (\n            <div className=\"text-center py-8\">\n              <p>Select a customer to view their history</p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/SalesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PaginationNext' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PaginationPrevious' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'saleItems' is assigned a value but never used.","line":83,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { ReceiptSettings } from \"@/components/pos/ReceiptSettings\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Receipt, Loader2 } from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Sale {\n  id: number;\n  customer_id: number | null;\n  total_amount: string;\n  payment_method: string;\n  status: string;\n  createdAt: string;\n  customer?: {\n    name: string;\n    email: string | null;\n    phone: string | null;\n  };\n  user: {\n    name: string;\n    email: string;\n  };\n  items: {\n    id: number;\n    product_id: number;\n    quantity: number;\n    unit_price: string;\n    total: string;\n    product: {\n      name: string;\n      product_number: string;\n    };\n  }[];\n}\n\nexport function SalesPage() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedSale, setSelectedSale] = useState<Sale | null>(null);\n  const pageSize = 10;\n\n  const { data: salesData, isLoading } = useQuery<{\n    sales: Sale[];\n    total: number;\n  }>({\n    queryKey: [\"sales\", currentPage],\n    queryFn: async () => {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/sales?page=${currentPage}&pageSize=${pageSize}`,\n        { credentials: \"include\" },\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch sales\");\n      }\n      return response.json();\n    },\n  });\n\n  const { data: saleItems, isLoading: isLoadingSaleItems } = useQuery<\n    SaleItem[]\n  >({\n    queryKey: [\"sale-items\", selectedSale?.id],\n    queryFn: async () => {\n      if (!selectedSale) return [];\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL}/sales/${selectedSale.id}/items`,\n        { credentials: \"include\" },\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch sale items\");\n      }\n      return response.json();\n    },\n    enabled: !!selectedSale,\n  });\n\n  const totalPages = salesData ? Math.ceil(salesData.total / pageSize) : 1;\n\n  const formatCurrency = (amount: string) => {\n    return `KSh ${Number(amount).toLocaleString(\"en-KE\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const getPaymentStatusColor = (status: string | undefined) => {\n    if (!status) return \"bg-gray-500\";\n\n    switch (status.toLowerCase()) {\n      case \"paid\":\n        return \"bg-green-500\";\n      case \"pending\":\n        return \"bg-yellow-500\";\n      case \"failed\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\">Sales History</h1>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">\n              <Receipt className=\"w-4 h-4 mr-2\" />\n              Receipt Settings\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Customize Receipt</DialogTitle>\n            </DialogHeader>\n            <ReceiptSettings />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      ) : (\n        <>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Cashier</TableHead>\n                  <TableHead>Payment Method</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Receipt Status</TableHead>\n                  <TableHead className=\"text-right\">Total</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {salesData?.sales.map((sale) => (\n                  <TableRow key={sale.id}>\n                    <TableCell>\n                      {format(new Date(sale.createdAt), \"PPp\")}\n                    </TableCell>\n                    <TableCell>\n                      {sale.customer?.name || \"Walk-in Customer\"}\n                    </TableCell>\n                    <TableCell>\n                      {sale.user?.name || sale.user?.email || \"Unknown User\"}\n                    </TableCell>\n                    <TableCell className=\"capitalize\">\n                      {sale.payment_method}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getPaymentStatusColor(sale.status)}>\n                        {sale.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {sale.receiptStatus ? (\n                        <div className=\"flex gap-2\">\n                          <Badge\n                            variant={\n                              sale.receiptStatus.sms ? \"default\" : \"outline\"\n                            }\n                          >\n                            SMS\n                          </Badge>\n                          <Badge\n                            variant={\n                              sale.receiptStatus.whatsapp\n                                ? \"default\"\n                                : \"outline\"\n                            }\n                          >\n                            WhatsApp\n                          </Badge>\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground text-sm\">\n                          Not sent\n                        </span>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatCurrency(sale.total_amount)}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => setSelectedSale(sale)}\n                      >\n                        View Details\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          <Pagination className=\"mt-4\">\n            <PaginationContent>\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =>\n                    setCurrentPage((prev) => Math.max(prev - 1, 1))\n                  }\n                  disabled={currentPage === 1}\n                >\n                  Previous\n                </Button>\n              </PaginationItem>\n              {Array.from({ length: totalPages }, (_, i) => i + 1).map(\n                (page) => (\n                  <PaginationItem key={page}>\n                    <PaginationLink\n                      onClick={() => setCurrentPage(page)}\n                      isActive={currentPage === page}\n                    >\n                      {page}\n                    </PaginationLink>\n                  </PaginationItem>\n                ),\n              )}\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =>\n                    setCurrentPage((prev) => Math.min(prev + 1, totalPages))\n                  }\n                  disabled={currentPage === totalPages}\n                >\n                  Next\n                </Button>\n              </PaginationItem>\n            </PaginationContent>\n          </Pagination>\n        </>\n      )}\n\n      <Dialog\n        open={!!selectedSale}\n        onOpenChange={(open) => !open && setSelectedSale(null)}\n      >\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Sale Details</DialogTitle>\n          </DialogHeader>\n\n          {selectedSale && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Customer Information</h3>\n                  <p>{selectedSale.customer?.name || \"Walk-in Customer\"}</p>\n                  {selectedSale.customer?.email && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedSale.customer.email}\n                    </p>\n                  )}\n                  {selectedSale.customer?.phone && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedSale.customer.phone}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Payment Information</h3>\n                  <p className=\"capitalize\">\n                    Method: {selectedSale.payment_method}\n                  </p>\n                  <p>\n                    Status:{\" \"}\n                    <Badge\n                      className={getPaymentStatusColor(selectedSale.status)}\n                    >\n                      {selectedSale.status}\n                    </Badge>\n                  </p>\n                  <p>Total: {formatCurrency(selectedSale.total_amount)}</p>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Sale Information</h3>\n                  <p>Date: {format(new Date(selectedSale.createdAt), \"PPp\")}</p>\n                  <p>\n                    Cashier:{\" \"}\n                    {selectedSale.user?.name ||\n                      selectedSale.user?.email ||\n                      \"Unknown User\"}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Items</h3>\n                {isLoadingSaleItems ? (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  </div>\n                ) : (\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Product</TableHead>\n                          <TableHead>Product Number</TableHead>\n                          <TableHead className=\"text-right\">\n                            Unit Price\n                          </TableHead>\n                          <TableHead className=\"text-right\">Quantity</TableHead>\n                          <TableHead className=\"text-right\">Total</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {selectedSale.items?.map((item) => (\n                          <TableRow key={item.id}>\n                            <TableCell>{item.product.name}</TableCell>\n                            <TableCell>{item.product.product_number}</TableCell>\n                            <TableCell className=\"text-right\">\n                              {formatCurrency(item.unit_price)}\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              {item.quantity}\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              {formatCurrency(item.total)}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/pages/__tests__/PosPage.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[860,863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[860,863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { render, screen, waitFor } from \"../../test/utils\";\nimport PosPage from \"../PosPage\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\n// Mock the toast hook\nvi.mock(\"@/components/ui/use-toast\", () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock fetch API\nglobal.fetch = vi.fn();\n\ndescribe(\"PosPage\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n\n    // Mock successful products response\n    (global.fetch as any).mockResolvedValueOnce({\n      ok: true,\n      json: async () => [\n        {\n          id: 1,\n          name: \"Test Product\",\n          selling_price: \"100\",\n          quantity: 10,\n          stock_unit: \"piece\",\n          available_units: 10,\n        },\n      ],\n    });\n\n    // Mock successful customers response\n    (global.fetch as any).mockResolvedValueOnce({\n      ok: true,\n      json: async () => [{ id: 1, name: \"Test Customer\" }],\n    });\n\n    // Mock localStorage\n    const localStorageMock = {\n      getItem: vi.fn().mockReturnValue(null),\n      setItem: vi.fn(),\n    };\n    Object.defineProperty(window, \"localStorage\", {\n      value: localStorageMock,\n    });\n  });\n\n  it(\"should render the page with product and cart sections\", async () => {\n    render(<PosPage />);\n\n    // Should show loading state or skeleton initially\n\n    // Wait for products to load\n    await waitFor(() => {\n      expect(global.fetch).toHaveBeenCalledTimes(2);\n    });\n\n    // Check if key elements are present\n    expect(screen.getByText(/cart/i)).toBeInTheDocument();\n    expect(screen.getByPlaceholderText(/search products/i)).toBeInTheDocument();\n  });\n\n  // More tests can be added for cart interactions\n});\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/services/authService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/services/expenseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/store/customersSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/store/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/store/productsSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/store/purchaseOrdersSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/store/suppliersSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/test/contexts/CartContext.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'act' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { render, screen, act, fireEvent } from \"@testing-library/react\";\nimport { CartProvider, useCart } from \"../../contexts/CartContext\";\n\n// Mock localStorage\nconst mockLocalStorage = (() => {\n  let store: Record<string, string> = {};\n  return {\n    getItem: jest.fn((key: string) => store[key] || null),\n    setItem: jest.fn((key: string, value: string) => {\n      store[key] = value;\n    }),\n    removeItem: jest.fn((key: string) => {\n      delete store[key];\n    }),\n    clear: jest.fn(() => {\n      store = {};\n    }),\n    store,\n  };\n})();\n\nObject.defineProperty(window, \"localStorage\", { value: mockLocalStorage });\n\n// Test component that uses the cart\nconst TestComponent = () => {\n  const { cart, addToCart, removeFromCart, clearCart } = useCart();\n\n  return (\n    <div>\n      <div data-testid=\"cart-items\">{cart.items.length}</div>\n      <div data-testid=\"cart-total\">{cart.total}</div>\n      <button\n        data-testid=\"add-item\"\n        onClick={() =>\n          addToCart({\n            id: 1,\n            name: \"Test Product\",\n            product_code: \"TEST001\",\n            selling_price: \"10\",\n            stock_unit: \"piece\",\n            quantity: 100,\n            buying_price: \"5\",\n            available_units: 100,\n          })\n        }\n      >\n        Add Item\n      </button>\n      <button data-testid=\"remove-item\" onClick={() => removeFromCart(1)}>\n        Remove Item\n      </button>\n      <button data-testid=\"clear-cart\" onClick={() => clearCart()}>\n        Clear Cart\n      </button>\n    </div>\n  );\n};\n\ndescribe(\"CartContext\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    localStorage.clear();\n  });\n\n  it(\"should initialize with empty cart\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"0\");\n    expect(screen.getByTestId(\"cart-total\")).toHaveTextContent(\"0\");\n  });\n\n  it(\"should add items to cart\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"1\");\n    expect(screen.getByTestId(\"cart-total\")).toHaveTextContent(\"10\");\n  });\n\n  it(\"should remove items from cart\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    // Add an item\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"1\");\n\n    // Remove the item\n    fireEvent.click(screen.getByTestId(\"remove-item\"));\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"0\");\n  });\n\n  it(\"should clear the cart\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    // Add items\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"2\");\n\n    // Clear the cart\n    fireEvent.click(screen.getByTestId(\"clear-cart\"));\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"0\");\n  });\n\n  it(\"should save cart to localStorage\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    // Add an item\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n\n    // Check localStorage was called\n    expect(localStorage.setItem).toHaveBeenCalled();\n\n    const savedCartStr = mockLocalStorage.getItem(\"pos_cart_v2\");\n    expect(savedCartStr).not.toBeNull();\n\n    if (savedCartStr) {\n      const savedCart = JSON.parse(savedCartStr);\n      expect(savedCart.items.length).toBe(1);\n      expect(savedCart.total).toBe(10);\n    }\n  });\n\n  it(\"should load cart from localStorage on mount\", () => {\n    // Setup localStorage with a cart\n    const mockCart = {\n      items: [\n        {\n          id: 1,\n          product: {\n            id: 1,\n            name: \"Test Product\",\n            product_code: \"TEST001\",\n            selling_price: \"10\",\n            buying_price: \"5\",\n            quantity: 100,\n            available_units: 100,\n            stock_unit: \"piece\",\n          },\n          quantity: 2,\n          unit_price: 10,\n          total: 20,\n          unit_type: \"piece\",\n        },\n      ],\n      total: 20,\n    };\n\n    localStorage.setItem(\"pos_cart_v2\", JSON.stringify(mockCart));\n    localStorage.setItem(\"pos_cart_v2_timestamp\", Date.now().toString());\n\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    // Check cart was loaded\n    expect(screen.getByTestId(\"cart-items\")).toHaveTextContent(\"1\");\n    expect(screen.getByTestId(\"cart-total\")).toHaveTextContent(\"20\");\n  });\n\n  it(\"should clear localStorage when clearing cart\", () => {\n    render(\n      <CartProvider>\n        <TestComponent />\n      </CartProvider>,\n    );\n\n    // Add an item and verify localStorage\n    fireEvent.click(screen.getByTestId(\"add-item\"));\n    expect(localStorage.setItem).toHaveBeenCalled();\n\n    // Clear cart and verify localStorage was cleared\n    fireEvent.click(screen.getByTestId(\"clear-cart\"));\n    expect(localStorage.removeItem).toHaveBeenCalledWith(\"pos_cart_v2\");\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/test/delivery.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/test/utils.tsx","messages":[{"ruleId":"import/export","severity":2,"message":"Multiple exports of name 'render'.","line":15,"column":1,"nodeType":"ExportAllDeclaration","endLine":15,"endColumn":40},{"ruleId":"import/export","severity":2,"message":"Multiple exports of name 'render'.","line":18,"column":26,"nodeType":"Identifier","endLine":18,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactElement } from \"react\";\nimport { render, RenderOptions } from \"@testing-library/react\";\n\n// Add providers here if needed (e.g., router, theme, auth context)\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, \"wrapper\">,\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\n// re-export everything\nexport * from \"@testing-library/react\";\n\n// override render method\nexport { customRender as render };\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/customer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/expense.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/loyalty.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/pos.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/product-supplier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/product.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/purchase-order.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/types/supplier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/utils/__tests__/formatters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/src/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]},{"filePath":"/home/samuel/Development/Pos/ProSaleManager/client/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]}]}]
